#!/usr/bin/python
#author: namhb
import re, requests, urllib2, string, time
class coreScannerModule:
	def __init__(self, logger, profile):
		self.logger							=	logger
		self.profile 						=	profile
		self.basicOptions					=	{
			}
		# Help for this module, how to use
		self.help 							=	"" \
			"This is help for module." \
			""
	def printOptionsLong(self, key, currentSetting, requiredString, description):
		
		if(currentSetting != None):
			blockSize 							=	45
			lineC 								=	int(len(currentSetting) / blockSize) + 1					# Primary
			lineD 								=	int(len(description) / blockSize) + 1
			line 								=	lineC > lineD and lineC or lineD
			for i in range(0,line):
				start 							=	i * blockSize
				end 							=	(i+1) * blockSize
				if(i == 0):
					# First line
					print("\t{0:20s}{1:50s}{2:12s}{3}".format(key,currentSetting[start:end],requiredString,description[start:end]))
				else:
					# Not print key
					print("\t{0:20s}{1:50s}{2:12s}{3}".format("",currentSetting[start:end],"",description[start:end]))
		else:
			# Split by desciptions
			blockSize 							=	50
			lineD 								=	int(len(description) / blockSize) + 1
			for i in range(0,lineD):
				start 							=	i * blockSize
				end 							=	(i+1) * blockSize
				if(i == 0):
					# First line
					print("\t{0:20s}{1:50s}{2:12s}{3}".format(key,currentSetting,requiredString,description[start:end]))
				else:
					# Not print key
					print("\t{0:20s}{1:50s}{2:12s}{3}".format("","","",description[start:end]))
	def printOptions(self):
		print("Basic options")
		print("=============")
		print("")
		print("\t{0:20s}{1:50s}{2:12s}{3}".format("Name","Current Setting","Required","Description"))
		print("\t{0:20s}{1:50s}{2:12s}{3}".format("----","---------------","--------","-----------"))
		print("")
		for key in self.basicOptions.keys():
			option 							= 	self.basicOptions[key]
			requiredString					=	option["required"] and "YES" or "NO"
			# print("\t{0:20s}{1:50s}{2:12s}{3}".format(key,option["currentSetting"],requiredString,option["description"]))
			self.printOptionsLong(key,option["currentSetting"],requiredString,option["description"])
	def start(self):
		self.logger.warning("Started Module: {0}.".format(self.name))
	def end(self):
		# Finish
		pass